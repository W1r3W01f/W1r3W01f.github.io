<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IrisCTF-2025</title>
      <link href="/2025/01/07/irisctf2025/"/>
      <url>/2025/01/07/irisctf2025/</url>
      
        <content type="html"><![CDATA[<p>I participated in IrisCTF 2025, organized by IrisSec, as a core member of the team InfoSecIITR. Our team secured 9th place globally. Here are the Writeups of some Forensics, Netwroking and RF challenges I was personally able to solve during the competition.</p><h2 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h2><h3 id="deldeldel"><a href="#deldeldel" class="headerlink" title="deldeldel"></a>deldeldel</h3><h4 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p><img src="/./images/chall1.png" alt="Description"></p><p>Source File: <a href="/./files/deldeldel.tar.gz">deldeldel.tar.gz</a></p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>We are give a packet capture file for this challenge.On viewing it in Wireshark a stream of USB packets can be discoverd.</p><p><img src="/./images/wireshark.png" alt="Wireshark"></p><p>The file name indicating a <code>keylogger</code> and the packets from ip 1.3.2 with Leftover Capture data that would be 8 byte strings made me believe for certain that its USB keyboard communicating with our host.</p><h4 id="Parsing-USB-CAP-Data"><a href="#Parsing-USB-CAP-Data" class="headerlink" title="Parsing USB CAP Data"></a>Parsing USB CAP Data</h4><p>I used the following online Keyboard parser tool to parse the HID data and hence retrieve the flag.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(https://github.com/5h4rrk/CTF-Usb_Keyboard_Parser/blob/main/Usb_Keyboard_Parser.py)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">w0lf@hp:~$ python3 Usb_Keyboard_Parser.py klogger.pcapng</span><br><span class="line">[-] Found Modifier <span class="keyword">in</span> 310 packets [-]</span><br><span class="line"></span><br><span class="line">[+] Using filter <span class="string">&quot;usb.capdata&quot;</span> Retrived HID Data is :</span><br><span class="line"></span><br><span class="line">Hheey   AAalicce! Ii  tthink  Ii<span class="string">&#x27;&#x27;</span>m  ssupppooseed  too  giivee yoou   tiss fllaag:</span><br><span class="line"></span><br><span class="line">iriisctfF&#123;[tthis_akeyloggeer_iisS_too_hard_to_use&#125;</span><br></pre></td></tr></table></figure><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">irisctf&#123;this_keylogger_is_too_hard_to_use&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Windy-Day"><a href="#Windy-Day" class="headerlink" title="Windy Day"></a>Windy Day</h3><h2 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><p><img src="/./images/chall2.png" alt="Description"></p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>We are given a memory dump for this challenge. So we got to our beloved volatility for the analysis.</p><h4 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h4><p>I started analyzing the memdump.mem using <a href="https://github.com/volatilityfoundation/volatility3">Volatility3</a>.</p><p>The first step was as always listing the processes.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">w0lf@hp:~/volatility3$ python3 vol.py -f memdump.mem windows.pslist</span><br><span class="line">Volatility 3 Framework 2.6.1</span><br><span class="line">Progress:  100.00               PDB scanning finished</span><br><span class="line">PID     PPID    ImageFileName   Offset(V)       Threads Handles SessionId       Wow64   CreateTime      ExitTime        File output</span><br><span class="line"></span><br><span class="line">4       0       System  0xe38cb727f6c0  98      -       N/A     False   2025-01-03 16:50:11.000000      N/A     Disabled</span><br><span class="line">260     4       smss.exe        0xe38cb79de040  2       -       N/A     False   2025-01-03 16:50:11.000000      N/A     Disabled</span><br><span class="line">364     356     csrss.exe       0xe38cb7aa2440  9       -       0       False   2025-01-03 16:50:12.000000      N/A     Disabled</span><br><span class="line">428     260     smss.exe        0xe38cb7d79380  0       -       1       False   2025-01-03 16:50:12.000000      2025-01-03 16:50:12.000000      Disabled</span><br><span class="line">436     428     csrss.exe       0xe38cb7d95340  11      -       1       False   2025-01-03 16:50:12.000000      N/A     Disabled</span><br><span class="line">444     356     wininit.exe     0xe38cb7d9a080  1       -       0       False   2025-01-03 16:50:12.000000      N/A     Disabled</span><br><span class="line">488     428     winlogon.exe    0xe38cb7980080  4       -       1       False   2025-01-03 16:50:12.000000      N/A     Disabled</span><br><span class="line">548     444     services.exe    0xe38cb7f8c080  5       -       0       False   2025-01-03 16:50:13.000000      N/A     Disabled</span><br><span class="line">556     444     lsass.exe       0xe38cb7f89080  7       -       0       False   2025-01-03 16:50:13.000000      N/A     Disabled</span><br><span class="line">628     548     svchost.exe     0xe38cb7fdc4c0  17      -       0       False   2025-01-03 16:50:13.000000      N/A     Disabled</span><br><span class="line">672     548     svchost.exe     0xe38cb83ed180  10      -       0       False   2025-01-03 16:50:13.000000      N/A     Disabled</span><br><span class="line">780     488     dwm.exe 0xe38cbae30080  12      -       1       False   2025-01-03 16:50:13.000000      N/A     Disabled</span><br><span class="line">888     548     svchost.exe     0xe38cbaeac500  46      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">896     548     svchost.exe     0xe38cbaeb8340  19      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">904     548     svchost.exe     0xe38cbaebd800  23      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">948     548     svchost.exe     0xe38cbaee1800  12      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">964     548     svchost.exe     0xe38cbaeea800  18      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">624     548     svchost.exe     0xe38cbaf45800  24      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">1076    548     svchost.exe     0xe38cb82032c0  20      -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">1132    548     svchost.exe     0xe38cb824f800  6       -       0       False   2025-01-03 16:50:14.000000      N/A     Disabled</span><br><span class="line">1360    548     svchost.exe     0xe38cb82eb080  6       -       0       False   2025-01-03 16:50:15.000000      N/A     Disabled</span><br><span class="line">1696    548     svchost.exe     0xe38cb83d3800  11      -       0       False   2025-01-03 16:50:16.000000      N/A     Disabled</span><br><span class="line">1776    548     svchost.exe     0xe38cb8006800  5       -       0       False   2025-01-03 16:50:16.000000      N/A     Disabled</span><br><span class="line">1784    548     svchost.exe     0xe38cb800f800  9       -       0       False   2025-01-03 16:50:16.000000      N/A     Disabled</span><br><span class="line">1832    548     MsMpEng.exe     0xe38cb83e6340  27      -       0       False   2025-01-03 16:50:16.000000      N/A     Disabled</span><br><span class="line">2676    548     NisSrv.exe      0xe38cbb0bf800  3       -       0       False   2025-01-03 16:50:23.000000      N/A     Disabled</span><br><span class="line">2144    628     RuntimeBroker.  0xe38cb81a2080  12      -       1       False   2025-01-03 16:50:59.000000      N/A     Disabled</span><br><span class="line">2208    548     svchost.exe     0xe38cbb1de080  7       -       1       False   2025-01-03 16:51:00.000000      N/A     Disabled</span><br><span class="line">2220    888     sihost.exe      0xe38cbb1f8800  10      -       1       False   2025-01-03 16:51:00.000000      N/A     Disabled</span><br><span class="line">2276    888     taskhostw.exe   0xe38cb8140080  11      -       1       False   2025-01-03 16:51:00.000000      N/A     Disabled</span><br><span class="line">2592    488     userinit.exe    0xe38cbb202080  0       -       1       False   2025-01-03 16:51:01.000000      2025-01-03 16:51:31.000000      Disabled</span><br><span class="line">2856    2592    explorer.exe    0xe38cbb239800  70      -       1       False   2025-01-03 16:51:01.000000      N/A     Disabled</span><br><span class="line">2064    628     ShellExperienc  0xe38cbb2a4800  28      -       1       False   2025-01-03 16:51:03.000000      N/A     Disabled</span><br><span class="line">2216    628     SearchUI.exe    0xe38cbb2e3800  16      -       1       False   2025-01-03 16:51:04.000000      N/A     Disabled</span><br><span class="line">3248    2312    ServerManager.  0xe38cbb3d3800  13      -       1       False   2025-01-03 16:51:06.000000      N/A     Disabled</span><br><span class="line">3472    628     dllhost.exe     0xe38cb75b3340  2       -       1       False   2025-01-03 16:52:20.000000      N/A     Disabled</span><br><span class="line">3464    548     msdtc.exe       0xe38cb75c7800  9       -       0       False   2025-01-03 16:52:21.000000      N/A     Disabled</span><br><span class="line">1604    488     fontdrvhost.ex  0xe38cb75d8080  5       -       1       False   2025-01-03 16:54:00.000000      N/A     Disabled</span><br><span class="line">3036    4060    firefox.exe     0xe38cb818b500  89      -       1       True    2025-01-03 16:55:40.000000      N/A     Disabled</span><br><span class="line">3968    3036    firefox.exe     0xe38cb75b9080  22      -       1       True    2025-01-03 16:55:41.000000      N/A     Disabled</span><br><span class="line">3624    3036    firefox.exe     0xe38cbb380080  5       -       1       True    2025-01-03 16:55:41.000000      N/A     Disabled</span><br><span class="line">3828    3036    firefox.exe     0xe38cbb539800  17      -       1       True    2025-01-03 16:55:43.000000      N/A     Disabled</span><br><span class="line">2420    3036    firefox.exe     0xe38cbb711800  5       -       1       True    2025-01-03 16:55:44.000000      N/A     Disabled</span><br><span class="line">4076    3036    firefox.exe     0xe38cbb116080  17      -       1       True    2025-01-03 16:55:45.000000      N/A     Disabled</span><br><span class="line">3132    3036    firefox.exe     0xe38cbb1e1080  5       -       1       True    2025-01-03 16:55:47.000000      N/A     Disabled</span><br><span class="line">712     628     ApplicationFra  0xe38cbb573080  1       -       1       False   2025-01-03 16:56:02.000000      N/A     Disabled</span><br><span class="line">5044    3036    firefox.exe     0xe38cbb7c8800  5       -       1       True    2025-01-03 16:56:43.000000      N/A     Disabled</span><br><span class="line">4772    3036    firefox.exe     0xe38cbb0d6300  18      -       1       True    2025-01-03 16:57:38.000000      N/A     Disabled</span><br><span class="line">1380    2856    FTK Imager.exe  0xe38cbb82e800  20      -       1       False   2025-01-03 17:02:19.000000      N/A     Disabled</span><br><span class="line">5324    3036    firefox.exe     0xe38cbba94080  19      -       1       True    2025-01-03 17:09:52.000000      N/A     Disabled</span><br><span class="line">5804    3036    firefox.exe     0xe38cbb261080  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">2308    3036    firefox.exe     0xe38cbbb44080  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">2712    3036    firefox.exe     0xe38cbba16080  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">3328    3036    firefox.exe     0xe38cbb8c6800  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">6256    3036    firefox.exe     0xe38cbb884800  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">5288    3036    firefox.exe     0xe38cbb8a9800  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">5664    3036    firefox.exe     0xe38cbb7c9080  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">5196    3036    firefox.exe     0xe38cbb8c0800  19      -       1       True    2025-01-03 17:09:56.000000      N/A     Disabled</span><br><span class="line">4508    3036    firefox.exe     0xe38cbbbe8800  19      -       1       True    2025-01-03 17:09:59.000000      N/A     Disabled</span><br><span class="line">4344    3036    firefox.exe     0xe38cbbbb8080  19      -       1       True    2025-01-03 17:10:00.000000      N/A     Disabled</span><br><span class="line">928     3036    firefox.exe     0xe38cbbc8c080  19      -       1       True    2025-01-03 17:10:00.000000      N/A     Disabled</span><br><span class="line">740     3036    firefox.exe     0xe38cbb89e400  19      -       1       True    2025-01-03 17:10:01.000000      N/A     Disabled</span><br><span class="line">2252    3036    firefox.exe     0xe38cb7e25080  19      -       1       True    2025-01-03 17:10:01.000000      N/A     Disabled</span><br><span class="line">2920    3036    firefox.exe     0xe38cbbc9e080  19      -       1       True    2025-01-03 17:10:01.000000      N/A     Disabled</span><br><span class="line">3124    3036    firefox.exe     0xe38cbbca0080  19      -       1       True    2025-01-03 17:10:01.000000      N/A     Disabled</span><br><span class="line">7116    3036    firefox.exe     0xe38cb7e32680  19      -       1       True    2025-01-03 17:10:01.000000      N/A     Disabled</span><br><span class="line">6344    628     smartscreen.ex  0xe38cbbcd9080  13      -       1       False   2025-01-03 17:10:06.000000      N/A     Disabled</span><br><span class="line">7292    7052    MpCmdRun.exe    0xe38cbbad5800  5       -       0       False   2025-01-03 17:10:10.000000      N/A     Disabled</span><br><span class="line">8136    8112    Taskmgr.exe     0xe38cbb713800  15      -       1       False   2025-01-03 17:10:50.000000      N/A     Disabled</span><br><span class="line">4124    628     WmiPrvSE.exe    0xe38cbba9e800  10      -       0       False   2025-01-03 17:11:13.000000      N/A     Disabled</span><br><span class="line">5628    628     WmiPrvSE.exe    0xe38cb7d80080  9       -       0       False   2025-01-03 17:11:13.000000      N/A     Disabled</span><br></pre></td></tr></table></figure><p>This tells us that at the time of memory capture <code>firefox.exe</code> had been running and also since it only happens to be any process to concern, so the next step was to dump the memory of the proces firefox.exe (PID: 3036)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$python3</span> vol.py -f memdump.mem windows.memmap --pid 3036 --dump</span><br></pre></td></tr></table></figure><p>Now I had my firefox process dump and since its a browser so the most sensible thing to search for was URLs but that happened to be too many so now it was just some trial and error until we get the result that it was a google URL that happened to encode our flag in base64.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">..</span><br><span class="line">.</span><br><span class="line">https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h4 id="Decoding-our-Flag"><a href="#Decoding-our-Flag" class="headerlink" title="Decoding our Flag"></a>Decoding our Flag</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$echo</span> <span class="string">&quot;aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0=&quot;</span> | <span class="built_in">base64</span> -d</span><br><span class="line">irisctf&#123;i_am_an_idiot_with_bad_memory&#125;</span><br></pre></td></tr></table></figure><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">irisctf&#123;i_am_an_idiot_with_bad_memory&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Cheesy-Approach"><a href="#Cheesy-Approach" class="headerlink" title="Cheesy Approach"></a>Cheesy Approach</h4><p>After the CTF ended the discussion led to the relevation that just the string search the base64 encoding of <code>irisct</code> could yield this URL and hence the flag as well.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">w0lf@hp:~/volatility3$ strings memdump.mem | grep aXJpc2N0</span><br><span class="line">https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0Z</span><br><span class="line">https://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0ZntpX2FtX2FuX2l</span><br><span class="line">https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0Z</span><br><span class="line">https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2F</span><br><span class="line">https://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0Zn</span><br><span class="line">https://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0Zn</span><br><span class="line">O^firstPartyDomain=google-b-d.search.suggestions.mozilla,a,::https://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0ZntpX2FtX2FuX2</span><br><span class="line">https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D</span><br><span class="line">client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D</span><br><span class="line">.</span><br><span class="line">..</span><br></pre></td></tr></table></figure><h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><h3 id="No-Shark"><a href="#No-Shark" class="headerlink" title="No Shark?"></a>No Shark?</h3><h4 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p><img src="/./images/chall3.png" alt="Description"></p><p>Source File: <a href="/./files/noshark.tar.gz">noshark.tar.gz</a></p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><p>We received a text file for this challenge which contained some hex encoded data that on initial inspection on cyberchef, happened to be a tcp packet data file.</p><p><img src="/./images/file.png" alt="Given Data"></p><p>On analysing the initial data streams, the first lengthy stream happened to catch my eye with <code>JFIF</code> magic bytes being evidently present which made me believe these are the data packets of a TCP file transfer stream wherein a .jpeg file was sent and hopefully that should contain our flag as well.</p><p><img src="/./images/first_segment.png" alt="Initial Data"></p><h4 id="Constructing-the-image"><a href="#Constructing-the-image" class="headerlink" title="Constructing the image"></a>Constructing the image</h4><p>We can write a simple python script to do the task i.e. remove the first 64 bytes of all data that correspond to tcp headers and hence happen to be same alternatively, and just take and concat the payload bytes to a new file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">input_file_path = <span class="string">&quot;noshark.txt&quot;</span></span><br><span class="line">output_file_path = <span class="string">&quot;output.jpg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(input_file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> input_file, <span class="built_in">open</span>(output_file_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    hex_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> input_file:</span><br><span class="line">        processed_line = line.strip()</span><br><span class="line">        hex_data += processed_line[<span class="number">132</span>:]</span><br><span class="line">    trimmed_data = hex_data[<span class="number">32</span>:]</span><br><span class="line">    decoded_data = <span class="built_in">bytes</span>.fromhex(trimmed_data)</span><br><span class="line">    output_file.write(decoded_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Data has been successfully processed and saved to <span class="subst">&#123;output_file_path&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/./images/output.jpg" alt="Constructed Image"></p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">irisctf&#123;welcome_to_net_its_still_ez_to_read_caps_without_wireshark&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RF"><a href="#RF" class="headerlink" title="RF"></a>RF</h2><h3 id="dotdotdot"><a href="#dotdotdot" class="headerlink" title="dotdotdot"></a>dotdotdot</h3><h4 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a>Challenge Description</h4><p><img src="/./images/chall4.png" alt="Description"></p><p>Source File: <a href="/./files/dotdotdot.tar.gz">dotdotdot.tar.gz</a></p><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><p>We are given a .iq file, which are standard RF signal files, so the first step was to convert it to corresponding .wav file which can be easily done using the following commnd.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sox -e <span class="built_in">float</span> -t raw -r 192000 -b 32 -c 2 dotdotdot.iq -t wav -e <span class="built_in">float</span> -b 32 -c 2 -r 192000 output.wav</span><br></pre></td></tr></table></figure><p>Once we have the data as the wav file, the first thing to inspect was obviously the spectrogram and once we do so, we immediately observe a morse codee present at one of the frequncies.</p><p><img src="/./images/spectrogram.png" alt="Spectrogram"></p><h4 id="Constructing-the-Flag"><a href="#Constructing-the-Flag" class="headerlink" title="Constructing the Flag"></a>Constructing the Flag</h4><p>Now it would have been ideal to apply a low pass filter to make the morse more predominent and then use audio morse decoder but I just went on with manual decoding of the morse using a morse conversion sheet.</p><p>Flag: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">irisctf&#123;n01s3_g0t_n0th1ng_0n_my_m0rse&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF-Writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensics </tag>
            
            <tag> Wireshark </tag>
            
            <tag> Volatility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCACTF 5.0 2024</title>
      <link href="/2024/06/12/BCACTF-5-0-2024/"/>
      <url>/2024/06/12/BCACTF-5-0-2024/</url>
      
        <content type="html"><![CDATA[<p>I participated in BCACTF 2024, as a core member of the team InfoSecIITR. Our team secured 7th place globally. Here are the Writeups of some challenges I was personally able to solve during the competition.</p><h2 id="Forensics-23-719-writeup"><a href="#Forensics-23-719-writeup" class="headerlink" title="Forensics&#x2F;23-719-writeup"></a>Forensics&#x2F;23-719-writeup</h2><h3 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>We are given a pdf along with the following description:</p><p>That’s a nice unanimous supreme court decision you’ve made public, sure would be a shame if someone didn’t properly clean up remnants of a prior version of the document before publishing it.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>The solution was pretty straight forward we just find for the initials of the flag i.e. <code>bacactf</code> and highlight some of the text </p><p><img src="/./images/23-719_1.png" alt="Image 1"></p><p> So we select that text and paste it in a text editor and we reveal the flag :</p><p><img src="/./images/23-719_2.png" alt="Image 2"></p><p>So our flag becomes -&gt;</p><p><code>bcactf&#123;rEAl_WOrLd_appLIc4t1ons_Of_cTf_ad04cc78601d5da8&#125;</code></p><p>………………………………………………………..</p><h2 id="Forensics-sheep-writeup"><a href="#Forensics-sheep-writeup" class="headerlink" title="Forensics&#x2F;sheep-writeup"></a>Forensics&#x2F;sheep-writeup</h2><h3 id="Challenge-Description-1"><a href="#Challenge-Description-1" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>We are given a .shp along with the following hint:</p><p>Figure out what type of file it is and see if there are tools you can use or modify.</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>Upon some research we find out that .shp are ESRI shapefiles used in GIS softwares like Google Earth Pro but such softwares require 3 of such files as mandatory which are a .shp, .shx and a .dbf file which work complementorily to produce the geographical data but some more reserach yielded this software that can standalone process a .shp file (<a href="https://softradar.com/shp-viewer/">https://softradar.com/shp-viewer/</a>). So we just load our sheep.shp in the software and thats it we get the flag :</p><p><img src="/./images/sheep_1.png" alt="Image 1"></p><p>So our flag becomes -&gt;</p><p><code>bcactf&#123;SHaPE_f1lEd_b54a11ac9c87c8&#125;</code></p><p>………………………………………………………….</p><h2 id="Forensics-Manipulate-Spreadsheet-2-writeup"><a href="#Forensics-Manipulate-Spreadsheet-2-writeup" class="headerlink" title="Forensics&#x2F;Manipulate Spreadsheet 2-writeup"></a>Forensics&#x2F;Manipulate Spreadsheet 2-writeup</h2><h3 id="Challenge-Description-2"><a href="#Challenge-Description-2" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>We are given an excel file for this challenge:</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>The first that we notice is this long string written in the A1 cell of the excel sheet.</p><p><img src="/./images/Manipulate_Spreadsheet_2_1.png" alt="Image 1"></p><p>The hex decode of this string reveals the following hint:</p><pre><code>In digital fields where data lies,Secret pages beneath clear skies.Cells entwine, mysteries feel,Layers of secrets they reveal.</code></pre><p>The layers part hint that there maybe a hidden sheet in this file and exactly that happens to be the case we unhide the sheet 2 of this excel file and there we find some bytes and index data along with another hint in the A1 cell of the sheet</p><p><img src="/./images/Manipulate_Spreadsheet_2_2.png" alt="Image 2"></p><p>The hex decode of this hint reveals:</p><pre><code>Lurking shadows, secrets play,Stealthy whispers on display.BITS aligned, LEAST in SIGht,Gleams of secrets, veiled in light.</code></pre><p>This reveals that we have to arrange the bytes in order of indices and then do LSB extract of the bytes so we do that and we get our flag as:</p><p><code>bcactf&#123;600D_job_Using_900G13_SHe3t5&#125;</code></p><p>…………………………………………………..</p><h2 id="Forensics-Touch-Tone-Telephone-writeup"><a href="#Forensics-Touch-Tone-Telephone-writeup" class="headerlink" title="Forensics&#x2F;Touch Tone Telephone-writeup"></a>Forensics&#x2F;Touch Tone Telephone-writeup</h2><h3 id="Challenge-Description-3"><a href="#Challenge-Description-3" class="headerlink" title="Challenge Description"></a>Challenge Description</h3><p>We are given a .wav along with the following hints:</p><pre><code>-DTMF is a really cool technology-There also used to be A, B, C, and D menu selection keys-How many keys are there in total? Is it a computer science-y number?-For key to number, Start at top left, reading order. (Sorry, 0 is not 0, my bad)</code></pre><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>Based on the hints the course of action gets pretty much cleared that we need to extract the dtmf tones of our wav file then perform a little substitution of keys before finally hex decoding the message. Now there are many online tools to detect the dtmf tones of a wav file but I used the CLI tool <code>multimon-ng</code> which gives us a result for the detected dtmf tones as </p><p><code>47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA43B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BBD4648</code></p><p>But due to the speed of the wav file some of the dtmf tones get overlapped in this result and doing some manual patching of this result we get the final dtmf tones as :</p><p><code>47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA443B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BB4D4648</code></p><p>Then we do the keys substituition as replacing <code>123A456B789C*0#D</code> by <code>0123456789ABCDEF</code> and print the hex decoded value using python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">input_string = <span class="string">&quot;xpdReWEfno4BtvReUHxu8tBrknyUh128DolsWh1oz7cnUDygIxkCItws05vN8SdkFpTPRvVNUcRTtoS7zEUaf7ONI3n0UtVuIli9BcPfxECYmDI_4E3rJAUhYGV9wOFI&quot;</span></span><br><span class="line"></span><br><span class="line">hex_indices = [</span><br><span class="line">    <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x6c</span>, <span class="number">0x38</span>, <span class="number">0x2b</span>, <span class="number">0x6f</span>, <span class="number">0x3e</span>, <span class="number">0x59</span>, <span class="number">0x6c</span>, <span class="number">0x38</span>, </span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0x6f</span>, <span class="number">0x1d</span>, <span class="number">0x72</span>, <span class="number">0x0a</span>, <span class="number">0x45</span>, <span class="number">0x59</span>, <span class="number">0x6f</span>, <span class="number">0x6c</span>, <span class="number">0x2e</span>, </span><br><span class="line">    <span class="number">0x6f</span>, <span class="number">0x6c</span>, <span class="number">0x26</span>, <span class="number">0x2b</span>, <span class="number">0x02</span>, <span class="number">0x6f</span>, <span class="number">0x01</span>, <span class="number">0x26</span>, <span class="number">0x72</span>, <span class="number">0x53</span>, </span><br><span class="line">    <span class="number">0x39</span>, <span class="number">0x04</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">resultant_string = <span class="string">&#x27;&#x27;</span>.join(input_string[index] <span class="keyword">for</span> index <span class="keyword">in</span> hex_indices)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resultant_string)</span><br></pre></td></tr></table></figure><p>Then we get the following message:</p><p><img src="/./images/Touch_Tone_Telephone_1.png" alt="Image 1"></p><p>Now comes the part to reverse this code so we write another code to solve this task which extract the characters of the flag based on the given indices of the garbage given in the end.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mapping = &#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;*&#x27;</span>: <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;#&#x27;</span>: <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;F&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">encoded_str = (<span class="string">&quot;47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA443B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BB4D4648&quot;</span>)</span><br><span class="line"></span><br><span class="line">decoded_str = <span class="string">&#x27;&#x27;</span>.join(mapping.get(char, char) <span class="keyword">for</span> char <span class="keyword">in</span> encoded_str)</span><br><span class="line"></span><br><span class="line">bytes_obj = <span class="built_in">bytes</span>.fromhex(decoded_str)</span><br><span class="line">result_string = bytes_obj.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result_string) </span><br></pre></td></tr></table></figure><p>And that reveals us our flag:</p><p><code>bcactf&#123;l3m0n_d3m0n_134v3_my_m1nd_p13a5e&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF-Writeups </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensics </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
