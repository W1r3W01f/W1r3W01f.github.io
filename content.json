[{"title":"IrisCTF-2025","date":"2025-01-06T18:30:00.000Z","path":"2025/01/07/irisctf2025/","text":"I participated in IrisCTF 2025, organized by IrisSec, as a core member of the team InfoSecIITR. Our team secured 9th place globally. Here are the Writeups of some Forensics, Netwroking and RF challenges I was personally able to solve during the competition. ForensicsdeldeldelChallenge Description Source File: deldeldel.tar.gz SolutionWe are give a packet capture file for this challenge.On viewing it in Wireshark a stream of USB packets can be discoverd. The file name indicating a keylogger and the packets from ip 1.3.2 with Leftover Capture data that would be 8 byte strings made me believe for certain that its USB keyboard communicating with our host. Parsing USB CAP DataI used the following online Keyboard parser tool to parse the HID data and hence retrieve the flag. 1(https://github.com/5h4rrk/CTF-Usb_Keyboard_Parser/blob/main/Usb_Keyboard_Parser.py) 12345678w0lf@hp:~$ python3 Usb_Keyboard_Parser.py klogger.pcapng[-] Found Modifier in 310 packets [-][+] Using filter &quot;usb.capdata&quot; Retrived HID Data is :Hheey AAalicce! Ii tthink Ii&#x27;&#x27;m ssupppooseed too giivee yoou tiss fllaag:iriisctfF&#123;[tthis_akeyloggeer_iisS_too_hard_to_use&#125; Flag: 1irisctf&#123;this_keylogger_is_too_hard_to_use&#125; Windy DayChallenge Description SolutionWe are given a memory dump for this challenge. So we got to our beloved volatility for the analysis. Initial AnalysisI started analyzing the memdump.mem using Volatility3. The first step was as always listing the processes. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576w0lf@hp:~/volatility3$ python3 vol.py -f memdump.mem windows.pslistVolatility 3 Framework 2.6.1Progress: 100.00 PDB scanning finishedPID PPID ImageFileName Offset(V) Threads Handles SessionId Wow64 CreateTime ExitTime File output4 0 System 0xe38cb727f6c0 98 - N/A False 2025-01-03 16:50:11.000000 N/A Disabled260 4 smss.exe 0xe38cb79de040 2 - N/A False 2025-01-03 16:50:11.000000 N/A Disabled364 356 csrss.exe 0xe38cb7aa2440 9 - 0 False 2025-01-03 16:50:12.000000 N/A Disabled428 260 smss.exe 0xe38cb7d79380 0 - 1 False 2025-01-03 16:50:12.000000 2025-01-03 16:50:12.000000 Disabled436 428 csrss.exe 0xe38cb7d95340 11 - 1 False 2025-01-03 16:50:12.000000 N/A Disabled444 356 wininit.exe 0xe38cb7d9a080 1 - 0 False 2025-01-03 16:50:12.000000 N/A Disabled488 428 winlogon.exe 0xe38cb7980080 4 - 1 False 2025-01-03 16:50:12.000000 N/A Disabled548 444 services.exe 0xe38cb7f8c080 5 - 0 False 2025-01-03 16:50:13.000000 N/A Disabled556 444 lsass.exe 0xe38cb7f89080 7 - 0 False 2025-01-03 16:50:13.000000 N/A Disabled628 548 svchost.exe 0xe38cb7fdc4c0 17 - 0 False 2025-01-03 16:50:13.000000 N/A Disabled672 548 svchost.exe 0xe38cb83ed180 10 - 0 False 2025-01-03 16:50:13.000000 N/A Disabled780 488 dwm.exe 0xe38cbae30080 12 - 1 False 2025-01-03 16:50:13.000000 N/A Disabled888 548 svchost.exe 0xe38cbaeac500 46 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled896 548 svchost.exe 0xe38cbaeb8340 19 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled904 548 svchost.exe 0xe38cbaebd800 23 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled948 548 svchost.exe 0xe38cbaee1800 12 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled964 548 svchost.exe 0xe38cbaeea800 18 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled624 548 svchost.exe 0xe38cbaf45800 24 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled1076 548 svchost.exe 0xe38cb82032c0 20 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled1132 548 svchost.exe 0xe38cb824f800 6 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled1360 548 svchost.exe 0xe38cb82eb080 6 - 0 False 2025-01-03 16:50:15.000000 N/A Disabled1696 548 svchost.exe 0xe38cb83d3800 11 - 0 False 2025-01-03 16:50:16.000000 N/A Disabled1776 548 svchost.exe 0xe38cb8006800 5 - 0 False 2025-01-03 16:50:16.000000 N/A Disabled1784 548 svchost.exe 0xe38cb800f800 9 - 0 False 2025-01-03 16:50:16.000000 N/A Disabled1832 548 MsMpEng.exe 0xe38cb83e6340 27 - 0 False 2025-01-03 16:50:16.000000 N/A Disabled2676 548 NisSrv.exe 0xe38cbb0bf800 3 - 0 False 2025-01-03 16:50:23.000000 N/A Disabled2144 628 RuntimeBroker. 0xe38cb81a2080 12 - 1 False 2025-01-03 16:50:59.000000 N/A Disabled2208 548 svchost.exe 0xe38cbb1de080 7 - 1 False 2025-01-03 16:51:00.000000 N/A Disabled2220 888 sihost.exe 0xe38cbb1f8800 10 - 1 False 2025-01-03 16:51:00.000000 N/A Disabled2276 888 taskhostw.exe 0xe38cb8140080 11 - 1 False 2025-01-03 16:51:00.000000 N/A Disabled2592 488 userinit.exe 0xe38cbb202080 0 - 1 False 2025-01-03 16:51:01.000000 2025-01-03 16:51:31.000000 Disabled2856 2592 explorer.exe 0xe38cbb239800 70 - 1 False 2025-01-03 16:51:01.000000 N/A Disabled2064 628 ShellExperienc 0xe38cbb2a4800 28 - 1 False 2025-01-03 16:51:03.000000 N/A Disabled2216 628 SearchUI.exe 0xe38cbb2e3800 16 - 1 False 2025-01-03 16:51:04.000000 N/A Disabled3248 2312 ServerManager. 0xe38cbb3d3800 13 - 1 False 2025-01-03 16:51:06.000000 N/A Disabled3472 628 dllhost.exe 0xe38cb75b3340 2 - 1 False 2025-01-03 16:52:20.000000 N/A Disabled3464 548 msdtc.exe 0xe38cb75c7800 9 - 0 False 2025-01-03 16:52:21.000000 N/A Disabled1604 488 fontdrvhost.ex 0xe38cb75d8080 5 - 1 False 2025-01-03 16:54:00.000000 N/A Disabled3036 4060 firefox.exe 0xe38cb818b500 89 - 1 True 2025-01-03 16:55:40.000000 N/A Disabled3968 3036 firefox.exe 0xe38cb75b9080 22 - 1 True 2025-01-03 16:55:41.000000 N/A Disabled3624 3036 firefox.exe 0xe38cbb380080 5 - 1 True 2025-01-03 16:55:41.000000 N/A Disabled3828 3036 firefox.exe 0xe38cbb539800 17 - 1 True 2025-01-03 16:55:43.000000 N/A Disabled2420 3036 firefox.exe 0xe38cbb711800 5 - 1 True 2025-01-03 16:55:44.000000 N/A Disabled4076 3036 firefox.exe 0xe38cbb116080 17 - 1 True 2025-01-03 16:55:45.000000 N/A Disabled3132 3036 firefox.exe 0xe38cbb1e1080 5 - 1 True 2025-01-03 16:55:47.000000 N/A Disabled712 628 ApplicationFra 0xe38cbb573080 1 - 1 False 2025-01-03 16:56:02.000000 N/A Disabled5044 3036 firefox.exe 0xe38cbb7c8800 5 - 1 True 2025-01-03 16:56:43.000000 N/A Disabled4772 3036 firefox.exe 0xe38cbb0d6300 18 - 1 True 2025-01-03 16:57:38.000000 N/A Disabled1380 2856 FTK Imager.exe 0xe38cbb82e800 20 - 1 False 2025-01-03 17:02:19.000000 N/A Disabled5324 3036 firefox.exe 0xe38cbba94080 19 - 1 True 2025-01-03 17:09:52.000000 N/A Disabled5804 3036 firefox.exe 0xe38cbb261080 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled2308 3036 firefox.exe 0xe38cbbb44080 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled2712 3036 firefox.exe 0xe38cbba16080 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled3328 3036 firefox.exe 0xe38cbb8c6800 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled6256 3036 firefox.exe 0xe38cbb884800 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled5288 3036 firefox.exe 0xe38cbb8a9800 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled5664 3036 firefox.exe 0xe38cbb7c9080 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled5196 3036 firefox.exe 0xe38cbb8c0800 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled4508 3036 firefox.exe 0xe38cbbbe8800 19 - 1 True 2025-01-03 17:09:59.000000 N/A Disabled4344 3036 firefox.exe 0xe38cbbbb8080 19 - 1 True 2025-01-03 17:10:00.000000 N/A Disabled928 3036 firefox.exe 0xe38cbbc8c080 19 - 1 True 2025-01-03 17:10:00.000000 N/A Disabled740 3036 firefox.exe 0xe38cbb89e400 19 - 1 True 2025-01-03 17:10:01.000000 N/A Disabled2252 3036 firefox.exe 0xe38cb7e25080 19 - 1 True 2025-01-03 17:10:01.000000 N/A Disabled2920 3036 firefox.exe 0xe38cbbc9e080 19 - 1 True 2025-01-03 17:10:01.000000 N/A Disabled3124 3036 firefox.exe 0xe38cbbca0080 19 - 1 True 2025-01-03 17:10:01.000000 N/A Disabled7116 3036 firefox.exe 0xe38cb7e32680 19 - 1 True 2025-01-03 17:10:01.000000 N/A Disabled6344 628 smartscreen.ex 0xe38cbbcd9080 13 - 1 False 2025-01-03 17:10:06.000000 N/A Disabled7292 7052 MpCmdRun.exe 0xe38cbbad5800 5 - 0 False 2025-01-03 17:10:10.000000 N/A Disabled8136 8112 Taskmgr.exe 0xe38cbb713800 15 - 1 False 2025-01-03 17:10:50.000000 N/A Disabled4124 628 WmiPrvSE.exe 0xe38cbba9e800 10 - 0 False 2025-01-03 17:11:13.000000 N/A Disabled5628 628 WmiPrvSE.exe 0xe38cb7d80080 9 - 0 False 2025-01-03 17:11:13.000000 N/A Disabled This tells us that at the time of memory capture firefox.exe had been running and also since it only happens to be any process to concern, so the next step was to dump the memory of the proces firefox.exe (PID: 3036) 1$python3 vol.py -f memdump.mem windows.memmap --pid 3036 --dump Now I had my firefox process dump and since its a browser so the most sensible thing to search for was URLs but that happened to be too many so now it was just some trial and error until we get the result that it was a google URL that happened to encode our flag in base64. 1234...https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D. Decoding our Flag12$echo &quot;aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0=&quot; | base64 -dirisctf&#123;i_am_an_idiot_with_bad_memory&#125; Flag: 1irisctf&#123;i_am_an_idiot_with_bad_memory&#125; Cheesy ApproachAfter the CTF ended the discussion led to the relevation that just the string search the base64 encoding of irisct could yield this URL and hence the flag as well. 123456789101112131415w0lf@hp:~/volatility3$ strings memdump.mem | grep aXJpc2N0https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0Zhttps://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0ZntpX2FtX2FuX2lhttps://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0Zhttps://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2Fhttps://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0Znhttps://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0ZnO^firstPartyDomain=google-b-d.search.suggestions.mozilla,a,::https://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0ZntpX2FtX2FuX2https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2..client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3Dclient=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D... NetworkingNo Shark?Challenge Description Source File: noshark.tar.gz SolutionWe received a text file for this challenge which contained some hex encoded data that on initial inspection on cyberchef, happened to be a tcp packet data file. On analysing the initial data streams, the first lengthy stream happened to catch my eye with JFIF magic bytes being evidently present which made me believe these are the data packets of a TCP file transfer stream wherein a .jpeg file was sent and hopefully that should contain our flag as well. Constructing the imageWe can write a simple python script to do the task i.e. remove the first 64 bytes of all data that correspond to tcp headers and hence happen to be same alternatively, and just take and concat the payload bytes to a new file. 12345678910111213input_file_path = &quot;noshark.txt&quot;output_file_path = &quot;output.jpg&quot;with open(input_file_path, &quot;r&quot;) as input_file, open(output_file_path, &quot;wb&quot;) as output_file: hex_data = &#x27;&#x27; for line in input_file: processed_line = line.strip() hex_data += processed_line[132:] trimmed_data = hex_data[32:] decoded_data = bytes.fromhex(trimmed_data) output_file.write(decoded_data)print(f&quot;Data has been successfully processed and saved to &#123;output_file_path&#125;.&quot;) Flag: 1irisctf&#123;welcome_to_net_its_still_ez_to_read_caps_without_wireshark&#125; RFdotdotdotChallenge Description Source File: dotdotdot.tar.gz SolutionWe are given a .iq file, which are standard RF signal files, so the first step was to convert it to corresponding .wav file which can be easily done using the following commnd. 1sox -e float -t raw -r 192000 -b 32 -c 2 dotdotdot.iq -t wav -e float -b 32 -c 2 -r 192000 output.wav Once we have the data as the wav file, the first thing to inspect was obviously the spectrogram and once we do so, we immediately observe a morse codee present at one of the frequncies. Constructing the FlagNow it would have been ideal to apply a low pass filter to make the morse more predominent and then use audio morse decoder but I just went on with manual decoding of the morse using a morse conversion sheet. Flag: 1irisctf&#123;n01s3_g0t_n0th1ng_0n_my_m0rse&#125;","tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://w1r3w01f.github.io/tags/Forensics/"},{"name":"Wireshark","slug":"Wireshark","permalink":"http://w1r3w01f.github.io/tags/Wireshark/"},{"name":"Volatility","slug":"Volatility","permalink":"http://w1r3w01f.github.io/tags/Volatility/"}],"categories":[{"name":"CTF-Writeups","slug":"CTF-Writeups","permalink":"http://w1r3w01f.github.io/categories/CTF-Writeups/"}]},{"title":"BCACTF 5.0 2024","date":"2024-06-11T18:30:00.000Z","path":"2024/06/12/BCACTF-5-0-2024/","text":"I participated in BCACTF 2024, as a core member of the team InfoSecIITR. Our team secured 7th place globally. Here are the Writeups of some challenges I was personally able to solve during the competition. Forensics&#x2F;23-719-writeupChallenge DescriptionWe are given a pdf along with the following description: That’s a nice unanimous supreme court decision you’ve made public, sure would be a shame if someone didn’t properly clean up remnants of a prior version of the document before publishing it. SolutionThe solution was pretty straight forward we just find for the initials of the flag i.e. bacactf and highlight some of the text So we select that text and paste it in a text editor and we reveal the flag : So our flag becomes -&gt; bcactf&#123;rEAl_WOrLd_appLIc4t1ons_Of_cTf_ad04cc78601d5da8&#125; ……………………………………………………….. Forensics&#x2F;sheep-writeupChallenge DescriptionWe are given a .shp along with the following hint: Figure out what type of file it is and see if there are tools you can use or modify. SolutionUpon some research we find out that .shp are ESRI shapefiles used in GIS softwares like Google Earth Pro but such softwares require 3 of such files as mandatory which are a .shp, .shx and a .dbf file which work complementorily to produce the geographical data but some more reserach yielded this software that can standalone process a .shp file (https://softradar.com/shp-viewer/). So we just load our sheep.shp in the software and thats it we get the flag : So our flag becomes -&gt; bcactf&#123;SHaPE_f1lEd_b54a11ac9c87c8&#125; …………………………………………………………. Forensics&#x2F;Manipulate Spreadsheet 2-writeupChallenge DescriptionWe are given an excel file for this challenge: SolutionThe first that we notice is this long string written in the A1 cell of the excel sheet. The hex decode of this string reveals the following hint: In digital fields where data lies, Secret pages beneath clear skies. Cells entwine, mysteries feel, Layers of secrets they reveal. The layers part hint that there maybe a hidden sheet in this file and exactly that happens to be the case we unhide the sheet 2 of this excel file and there we find some bytes and index data along with another hint in the A1 cell of the sheet The hex decode of this hint reveals: Lurking shadows, secrets play, Stealthy whispers on display. BITS aligned, LEAST in SIGht, Gleams of secrets, veiled in light. This reveals that we have to arrange the bytes in order of indices and then do LSB extract of the bytes so we do that and we get our flag as: bcactf&#123;600D_job_Using_900G13_SHe3t5&#125; ………………………………………………….. Forensics&#x2F;Touch Tone Telephone-writeupChallenge DescriptionWe are given a .wav along with the following hints: -DTMF is a really cool technology -There also used to be A, B, C, and D menu selection keys -How many keys are there in total? Is it a computer science-y number? -For key to number, Start at top left, reading order. (Sorry, 0 is not 0, my bad) SolutionBased on the hints the course of action gets pretty much cleared that we need to extract the dtmf tones of our wav file then perform a little substitution of keys before finally hex decoding the message. Now there are many online tools to detect the dtmf tones of a wav file but I used the CLI tool multimon-ng which gives us a result for the detected dtmf tones as 47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA43B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BBD4648 But due to the speed of the wav file some of the dtmf tones get overlapped in this result and doing some manual patching of this result we get the final dtmf tones as : 47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA443B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BB4D4648 Then we do the keys substituition as replacing 123A456B789C*0#D by 0123456789ABCDEF and print the hex decoded value using python. 123456789101112input_string = &quot;xpdReWEfno4BtvReUHxu8tBrknyUh128DolsWh1oz7cnUDygIxkCItws05vN8SdkFpTPRvVNUcRTtoS7zEUaf7ONI3n0UtVuIli9BcPfxECYmDI_4E3rJAUhYGV9wOFI&quot;hex_indices = [ 0x61, 0x72, 0x6c, 0x38, 0x2b, 0x6f, 0x3e, 0x59, 0x6c, 0x38, 0x19, 0x6f, 0x1d, 0x72, 0x0a, 0x45, 0x59, 0x6f, 0x6c, 0x2e, 0x6f, 0x6c, 0x26, 0x2b, 0x02, 0x6f, 0x01, 0x26, 0x72, 0x53, 0x39, 0x04]resultant_string = &#x27;&#x27;.join(input_string[index] for index in hex_indices)print(resultant_string) Then we get the following message: Now comes the part to reverse this code so we write another code to solve this task which extract the characters of the flag based on the given indices of the garbage given in the end. 123456789101112mapping = &#123; &#x27;1&#x27;: &#x27;0&#x27;, &#x27;2&#x27;: &#x27;1&#x27;, &#x27;3&#x27;: &#x27;2&#x27;, &#x27;A&#x27;: &#x27;3&#x27;, &#x27;4&#x27;: &#x27;4&#x27;, &#x27;5&#x27;: &#x27;5&#x27;, &#x27;6&#x27;: &#x27;6&#x27;, &#x27;B&#x27;: &#x27;7&#x27;, &#x27;7&#x27;: &#x27;8&#x27;, &#x27;8&#x27;: &#x27;9&#x27;, &#x27;9&#x27;: &#x27;A&#x27;, &#x27;C&#x27;: &#x27;B&#x27;, &#x27;*&#x27;: &#x27;C&#x27;, &#x27;0&#x27;: &#x27;D&#x27;, &#x27;#&#x27;: &#x27;E&#x27;, &#x27;D&#x27;: &#x27;F&#x27;&#125;encoded_str = (&quot;47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA443B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BB4D4648&quot;)decoded_str = &#x27;&#x27;.join(mapping.get(char, char) for char in encoded_str)bytes_obj = bytes.fromhex(decoded_str)result_string = bytes_obj.decode(&quot;utf-8&quot;)print(result_string) And that reveals us our flag: bcactf&#123;l3m0n_d3m0n_134v3_my_m1nd_p13a5e&#125;","tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://w1r3w01f.github.io/tags/Forensics/"}],"categories":[{"name":"CTF-Writeups","slug":"CTF-Writeups","permalink":"http://w1r3w01f.github.io/categories/CTF-Writeups/"}]}]